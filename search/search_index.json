{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TransforMate Bot Documentation","text":"<p>Welcome to the web page for the TransforMate Discord Bot's official documentation! Here you'll be able to find resources, tutorials, and in-depth explanations for every available feature for users of the open-source transformation-themed Discord bot we're so proud of!</p> <p>I'd recommend you start by checking out our tutorial summary, as a starting point. And remember, have fun!</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#the-story-of-transformate","title":"The story of TransforMate","text":"<p>TL;DR: TransforMate is just a silly joke project that completely outgrew its original scope.</p> <p>It started quite a while ago, when one of my friends, Ren, introduced me to the awesome BPTBot, made by the awesome Leroco. It was a really cool bot, but it had a lot of faults. It was (and still is) closed source too, which, whilst perfectly understandable, frustrated me.  I love open source. I like being able to fix stuff when I find it's wrong, or to help improve things, add features, or even just investigate the code to learn how stuff works. I have always thought that code, whenever possible, should be free and open, because that means it won't die when the creators decide they no longer want to support it.</p> <p>If BPTBot had been open source, or if Leroco hadn't temporarily walked away from the project, I'd probably never have made TransforMate. Because, in truth, that's what this bot is. An \"I can do it better\" joke taken to a practical extreme.</p> <p>So, with some help from Ren, and some art from another friend, Zen, we made the base of TransforMate. It was buggy. It was inefficient. It was not versatile. It lacked a lot of features BPTBot had (and still does to this day), but it was fun. I even got Leroco to wake up and continue developing BPTBot. And it's shaping to be a seriously cool bot, which I wholeheartedly recommend you go check out if you even slightly enjoy using TransforMate. It's a much more stable and functional bot, though it is closed source, and lacks some TransforMate features too. But that's fine! I love the healthy competition we have developed and what we both have learnt and improved from it! Kudos to Leroco!</p> <p>I truly enjoyed developing TransforMate, and it was a great experience. But life went on, and I discontinued TransforMate for a good while. At the start of the summer of 2025, though, I tried to revive the project. And god did it revive. Thanks to some awesome people, like Gwen, Dux, Clodinator, CatoCat, and the great community we have been steadily building together, I have been able to take TransforMate to a new extreme.</p> <p>I will forever be thankful for our community, my Patreon supporters, and all the awesome people who help keep this project up and running. Without them, I probably would have taken this bot down a long time ago. Thanks for your support, guys. Love y'all! &lt;3</p>"},{"location":"about/#how-can-i-help","title":"How can I help?","text":"<p>TransforMate is mostly a passion project. Development, documenting, hosting, and maintenance, all fall under me at the moment. I am a single person, and, whilst I'm not going to lie and say I have bills to cover, monetary motivation is really great. I am thankful for even the smallest little help you can give me. You can do so over at my Patreon, which also gives you some extra perks, like early access to some of my written works, as well as priority feature requests.</p> <p>If you don't want, or can't help monetarily, it's competely fine. You can help the bot as easy as sharing it with friends, being active in the community, reporting bugs and bad actors, and suggesting new features.</p> <p>If you have any kind of code-related knowledge, I'm always thankful for some help with the coding part of the bot. It's always great to have some other folks having a look around and helping improve the code this little project is made up of.</p> <p>If you have any other ideas on how to help, like wanting to contribute with the community, infrastructure, or other aspects of the bot, please feel free to contact me, I'm always open to new ideas and helping hands!</p>"},{"location":"about/#contact","title":"Contact","text":"<p>The general and recommended way of contacting us is by joining our awesome community in the Official TransforMate Discord Server, where you can talk directly with our community and trained staff.</p> <p>If you're unable to join the server, or would prefer a more private environment, feel free to message me, the developer, on Discord, where I'm known as \"dorythecat\".</p> <p>At the moment, we don't have any more forms of contact available. Sorry for any inconveniences.</p>"},{"location":"about/#thank-you","title":"Thank you","text":"<p>I want to personally thank some awesome people, listed here, without which this bot would either not exist at all, or not be what it is. They have pushed me to give my everything, helped me continue, and selflessly helped develop, improve, and/or advertise this beautiful bot we have here in our hands.</p> <ul> <li> <p>A big thank you to Leroco, the awesome developer of the original BPTBot, whose   hiatus led me to start coding TransforMate; and who, through his continued   development of his own bot, has pushed me time and time again to add more, and   overall improve the features, documentation, and backend of the bot.</p> </li> <li> <p>To Espartanica, for originally showing me BPTBot on his rundown RP server, and   helping send my \"I could do it better in two weeks\" into (almost) a reality,   without which, this bot wouldn't exist.</p> </li> <li> <p>To Ren, for helping me with starting development, documentation, and deciphering   BPTBot, as well as being our assigned test subject.</p> </li> <li> <p>To Zen, for drawing the official logo, and being an awesome and selfless artist.</p> </li> <li> <p>To TwoFell, for giving us the name idea and winning the contest to name the bot.</p> </li> <li> <p>To my awesome staff team, in special to Gwen, for pushing me to advertise the bot,   effectively reviving it from its slumber.</p> </li> <li> <p>To the awesome PyCord dev team, from bringing home the framework upon which this   bot is built. Great job guys!</p> </li> <li> <p>To the awesome people behind MkDocs and Mermaid, that have made possible this   incredible and detailed documentation for our little labor of love.</p> </li> <li> <p>To everyone using the bot, collaborating with the community, or otherwise helping   me keep my motivation to keep working on this awesome little project, that I never   expected would go so far. Thanks to all of you. Love y'all! &lt;3</p> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v231","title":"v2.3.1","text":"<ul> <li>Fixed #65</li> <li>Fixed #66</li> <li>Fixed #67</li> <li>Fixed #68</li> <li>Fixed #69</li> <li>Fixed #64   (therefore #79 as well)</li> <li>Fixed a bug where the bot would not properly work on Windows systems.</li> <li>Made export_tf output be in code block format.</li> <li>Fixed a bug where the bot would not properly discern if a user was tfed or   not when using the \"who is it\" reaction</li> <li>Fixed a few minor bugs.</li> </ul>"},{"location":"changelog/#v230-blockade","title":"v2.3.0 (Blockade)","text":"<ul> <li>Added <code>/block category</code> command.</li> <li>Added <code>/admin block_category</code> command.</li> <li>Messages can now be escaped with <code>\\</code>.</li> <li>Fixed a bug where censors would not work properly with special characters.</li> <li>Fixed a bug where claimed users would lose that status upon having a transformation   imported upon them.</li> </ul>"},{"location":"changelog/#v221","title":"v2.2.1","text":"<ul> <li>Fixed a few minor bugs, and an undocumented bug by which people   would not properly get tfed randomly.</li> </ul>"},{"location":"changelog/#v220","title":"v2.2.0","text":"<ul> <li>Fixed #55</li> <li>Fixed #61</li> <li>Updated TSF to v1.2, which fixes #56</li> </ul>"},{"location":"changelog/#v211","title":"v2.1.1","text":"<ul> <li>Fixed a few bugs, of all kinds.</li> </ul>"},{"location":"changelog/#v210","title":"v2.1.0","text":"<ul> <li>Fixed the ability to use the alternative TF method when transformed and   trying to transform others</li> <li>Fixed a few minor bugs.</li> </ul>"},{"location":"changelog/#v200-transforweb","title":"v2.0.0 (TransforWeb)","text":"<ul> <li> <p>Added TransforWeb and the accompanying   TransforMate API to production, allowing   for a lot of new features, like the TSF Editor.</p> </li> <li> <p>Improved the performance of the bot slightly and fixed some minor bugs.</p> </li> </ul>"},{"location":"changelog/#v162","title":"v1.6.2","text":"<ul> <li>Fixed TSF data documentation.</li> </ul>"},{"location":"changelog/#v161","title":"v1.6.1","text":"<ul> <li>Fixed Issues #49 and   #50. Updated wiki to   reflect these changes.</li> </ul>"},{"location":"changelog/#v160-documate","title":"v1.6.0 (DocuMate)","text":"<ul> <li> <p>Added documentation</p> </li> <li> <p>Altered the Terms of Service and   Privacy Policy.</p> </li> </ul>"},{"location":"commands/summary/","title":"Summary","text":"<p>TransforMate has a lot of commands. To be able to use all of its functionality, you will need to have a basic understanding of how the commands work, and how they are structured both inside the code files, and at a client-side level.</p> <p>The following pages have been written to list the full plethora of commands contained in each of the categories, with an example usage listed. For a full description of the usage and inner workings of a command, click on it to be redirected to its specific page, with full details.</p> <p>Remember, command parameters are named in the documentation as they are present in the code. <code>&lt;parameter&gt;</code> means the parameter is optional, and doesn't have to be provided for all uses. <code>[parameter]</code> denotes a parameter that is required, and the command won't work without it.</p>"},{"location":"commands/summary/#transformation","title":"Transformation","text":"<p>These commands allow us to transform ourselves and others, and pay around with     those transformations, without altering any modifiers. This also includes the     commands to save and load tf files and srings</p>"},{"location":"commands/summary/#set-and-clear","title":"Set and Clear","text":"<p>These commands allow us to configure, alter, and clear the settings a user has, like their speech impediments and alterations, as well as other settings.</p>"},{"location":"commands/summary/#get","title":"Get","text":"<p>Get the current status of one or all of the settings of a specific user, as well as other information about the transformed users in a server.</p>"},{"location":"commands/summary/#block","title":"Block","text":"<p>Block users or channels from acting upon you through the bot.</p>"},{"location":"commands/summary/#admin","title":"Admin","text":"<p>Various commands for admins, from server settings, to global channel and user blocking.</p>"},{"location":"commands/summary/#others","title":"Others","text":"<p>Various commands with diverse utilities that don't fit into any other categories, like reporting or ping commands.</p>"},{"location":"commands/admin/","title":"Index","text":"<p>Admin commands are mean for admins to use to set up and moderate their servers. They range from global channel and user blocks, regenerating files, and setting up the server logs and settings.</p> <p>Bug</p> <p>There's a known issue by which, oftentimes, the admin commands won't have the proper permissions set where they should only be usable by admins. Please check this article from Discord to see how to properly set up slash command permissions in your server.</p> <ul> <li><code>/admin killhooks</code></li> </ul> Info <p>This command will delete and force regeneration of all the bot's webhooks on the server. Use if any errors arise with the webhooks.</p> <ul> <li><code>/admin block_channel &lt;channel&gt;</code></li> </ul> Info <p>Block a channel from being used by anyone in the server. Globally transformed users won't have any messages altered on these channels.</p> <ul> <li><code>/admin block_user [user]</code></li> </ul> Info <p>Blocks a user from using the bot inside the server.</p> <ul> <li><code>/admin block_category &lt;category&gt;</code></li> </ul> Info <p>Block a channel category from being used by anyone in the server. Globally transformed users won't have any messages altered on these channel categories.</p> <ul> <li><code>/admin list_blocked_channels</code></li> </ul> Info <p>List all the globally blocked channels on the server.</p> <ul> <li><code>/admin list_blocked_users</code></li> </ul> Info <p>List all the globally blocked users on the server.</p> <ul> <li><code>/admin setup_logs &lt;all&gt; &lt;edit&gt; &lt;delete&gt; &lt;transform&gt; &lt;claim&gt;</code></li> </ul> Info <p>Set up your logs, either in a single channel or in different channels for different functions.</p> <p>Bug</p> <p>Some logs don't work properly as expected.</p> <p>See this</p> <ul> <li><code>/admin update_settings &lt;clean_logs&gt; &lt;brackets&gt;</code></li> </ul> Info <p>Update the settings to your server. Clean logs makes it so that deletion logs from other bots (Dyno bot, at the moment) get deleted to not clog up your log channel. Brackets activates bracket mode, which makes the bot work more like TupperBox.</p> <ul> <li><code>/admin regen_server_tfs &lt;sure&gt; &lt;really_sure&gt; &lt;really_really_sure&gt; &lt;fully_sure&gt;</code></li> </ul> Info <p>Deletes all transformations for the current server.</p> <p>Danger</p> <p>This command is like the panic button of TransforMate. Only use when your server data is corrupt. he lost data is irrecoverable. Save your tfs.</p> <ul> <li><code>/admin regen_user_tfs [user] &lt;sure&gt; &lt;really_sure&gt;</code></li> </ul> Info <p>Removes all the server data of a user and regenerates it next time they transform, akin to when the user leaves the server.</p>"},{"location":"commands/admin/block_category/","title":"/admin block_category","text":""},{"location":"commands/admin/block_category/#syntax","title":"Syntax","text":"<p><code>/admin block_category &lt;category&gt;</code></p> <ul> <li><code>category</code>: A valid Discord Channel Category. If not provided, defaults to the current channel's category.</li> </ul>"},{"location":"commands/admin/block_category/#usage","title":"Usage","text":"<p>This command is the same as <code>/block category</code>, but it applies to the entire server, instead of a single user.</p>"},{"location":"commands/admin/block_category/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckCategory[category parameter provided]\n    CheckCategory --&gt; |False| AssignCategory[[category = ctx.channel. category]]\n    CheckCategory --&gt; |True| BlockCategory[[Block or unblock the selected category]]\n    AssignCategory --&gt; BlockCategory\n    BlockCategory --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/block_channel/","title":"/admin block_channel","text":""},{"location":"commands/admin/block_channel/#syntax","title":"Syntax","text":"<p><code>/admin block_channel &lt;channel&gt;</code></p> <ul> <li><code>channel</code>: A valid Discord Channel. If not provided, defaults to the current channel.</li> </ul>"},{"location":"commands/admin/block_channel/#usage","title":"Usage","text":"<p>This command is the same as <code>/block channel</code>, but it applies to the entire server, instead of a single user.</p>"},{"location":"commands/admin/block_channel/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckChannel[channel parameter provided]\n    CheckChannel --&gt; |False| AssignChannel[[channel = ctx.channel]]\n    CheckChannel --&gt; |True| BlockChannel[[Block the selected channel]]\n    AssignChannel --&gt; BlockChannel\n    BlockChannel --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/block_user/","title":"/admin block_user","text":""},{"location":"commands/admin/block_user/#syntax","title":"Syntax","text":"<p><code>/admin block_user [user]</code></p> <ul> <li><code>user</code>: A valid Discord User.</li> </ul>"},{"location":"commands/admin/block_user/#usage","title":"Usage","text":"<p>This command is the same as <code>/block user</code>, but it applies a server-wide ban, instead of only blocking them towards a single user.</p>"},{"location":"commands/admin/block_user/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; BlockUser[[Block the user]]\n    BlockUser --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/killhooks/","title":"/admin killhooks","text":""},{"location":"commands/admin/killhooks/#syntax","title":"Syntax","text":"<p><code>/admin killhooks</code></p>"},{"location":"commands/admin/killhooks/#usage","title":"Usage","text":"<p>This command will delete all the webhooks the bot has generated in a server. Its intended use is to execute when the bot seems slower than usual, channels have been modified, new channels have been blocked, or before kicking the bot. This command doesn't tend to affect the performance of the bot.</p>"},{"location":"commands/admin/killhooks/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; KillHooks[[Kill all webhooks]]\n    KillHooks --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/list_blocked_channels/","title":"/admin list_blocked_channels","text":""},{"location":"commands/admin/list_blocked_channels/#syntax","title":"Syntax","text":"<p><code>/admin list_blocked_channels</code></p>"},{"location":"commands/admin/list_blocked_channels/#usage","title":"Usage","text":"<p>This command will show you a list of the currently globally blocked channels for the server.</p>"},{"location":"commands/admin/list_blocked_channels/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/list_blocked_users/","title":"/admin list_blocked_users","text":""},{"location":"commands/admin/list_blocked_users/#syntax","title":"Syntax","text":"<p><code>/admin list_blocked_users</code></p>"},{"location":"commands/admin/list_blocked_users/#usage","title":"Usage","text":"<p>This command will show you a list of the currently globally blocked users for the server.</p>"},{"location":"commands/admin/list_blocked_users/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/regen_server_tfs/","title":"/admin regen_server_tfs","text":""},{"location":"commands/admin/regen_server_tfs/#syntax","title":"Syntax","text":"<p><code>/admin regen_server_tfs &lt;sure&gt; &lt;really_sure&gt; &lt;really_really_sure&gt; &lt;fully_sure&gt;</code></p> <ul> <li> <p><code>sure</code>: A boolean, defaults false. Command won't execute unless true.</p> </li> <li> <p><code>really_sure</code>: A boolean, defaults false. Command won't execute unless true.</p> </li> <li> <p><code>really_really_sure</code>: A boolean, defaults false. Command won't execute unless true.</p> </li> <li> <p><code>fully_sure</code>: A boolean, defaults false. Command won't execute unless true.</p> </li> </ul>"},{"location":"commands/admin/regen_server_tfs/#usage","title":"Usage","text":"<p>This command acts as a server-wide panic button. It will delete all transformation data related to the server, in an irrecoverable manner.</p> <p>Danger</p> <p>Make sure you really want to execute this command. You will be removing all the data, of all your users, permanently. Make sure you have some kind of backup, if possible. The only two cases where you should execute this command are if the bot is not working properly and, after contacting us, we have told you this is the only solution, or if you update your server settings.</p>"},{"location":"commands/admin/regen_server_tfs/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; MakeSure[[Check that the user has set all the sure fields to true]]\n    MakeSure --&gt; RemoveData[[Remove all of the users' data related to this server]]\n    RemoveData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/regen_user_tfs/","title":"/admin regen_user_tfs","text":""},{"location":"commands/admin/regen_user_tfs/#syntax","title":"Syntax","text":"<p><code>/admin regen_user_tfs [user] &lt;sure&gt; &lt;really_sure&gt;</code></p> <ul> <li> <p><code>user</code>: A valid Discord User, whose server data will be removed.</p> </li> <li> <p><code>sure</code>: A boolean, defaults to false. Command won't execute unless true.</p> </li> <li> <p><code>really_sure</code>: A boolean, defaults to false. Command won't execute unless true.</p> </li> </ul>"},{"location":"commands/admin/regen_user_tfs/#usage","title":"Usage","text":"<p>If a user is corrupt, or you need to reset their data for any reason, this command will do just that, akin to as if they had left the server and rejoined. Exercise caution when using.</p>"},{"location":"commands/admin/regen_user_tfs/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; MakeSure[[Check that the user has set all the sure fields to true]]\n    MakeSure --&gt; RemoveData[[Remove all the data of this user related to this server]]\n    RemoveData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/admin/setup_logs/","title":"/admin setup_logs","text":""},{"location":"commands/admin/setup_logs/#syntax","title":"Syntax","text":"<p><code>/admin setup_logs &lt;all&gt; &lt;edit&gt; &lt;delete&gt; &lt;transform&gt; &lt;claim&gt;</code></p> <ul> <li> <p><code>all</code>: A valid Discord Channel. If not provided, you must provide all other          parameters. It will send all available log messages to this channel.          If provided, will ignore all other provided values.</p> </li> <li> <p><code>edit</code>: A valid Discord Channel. Edit message logs will be sent here.</p> </li> <li> <p><code>delete</code>: A valid Discord Channel. Delete message logs will be sent here.</p> </li> <li> <p><code>transform</code>: A valid Discord Channel. Transformation logs will be sent here.</p> </li> <li> <p><code>claim</code>: A valid Discord Channel. Claim and safeword logs will be sent here.</p> </li> </ul>"},{"location":"commands/admin/setup_logs/#usage","title":"Usage","text":"<p>This command is used to set the logging functionalities of the bot, really useful for server staff to keep track of what happens around without all the clout.</p>"},{"location":"commands/admin/setup_logs/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckAll[all parameter provided]\n    CheckAll --&gt; |False| MakeAllLogs[[Setup the log channels]]\n    CheckAll --&gt; |True| MakeAllLogsAll[[Setup the log channels be the all channel]]\n    MakeAllLogs --&gt; SendAnswer[[Send answer]]\n    MakeAllLogsAll --&gt; SendAnswer</code></pre>"},{"location":"commands/admin/update_settings/","title":"/admin update_settings","text":""},{"location":"commands/admin/update_settings/#syntax","title":"Syntax","text":"<p><code>/admin update_settings &lt;clean_logs&gt; &lt;brackets&gt;</code></p> <ul> <li> <p><code>clean_logs</code>: A boolean, defaults false. If true, make the bot clean another bot's                 message deletion logs so the log channel doesn't clutter. (Only Dyno                 supported at the moment)</p> </li> <li> <p><code>brackets</code>: A boolean, defaults false. If true, enables bracket mode on the server,               that turns the bot into a TupperBox-like service. Regenerating server               files is recommended after enabling this setting.</p> </li> </ul>"},{"location":"commands/admin/update_settings/#usage","title":"Usage","text":"<p>This command is used to update the server-wide settings for the bot.</p> <p>Warning</p> <p>It is recommended you check this command out when setting up your server, since water, when people have transformed each other, it can become quite a nuisance to regen the transformed data to make this work properly.</p>"},{"location":"commands/admin/update_settings/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; UpdateSettings[[Update server settings]]\n    UpdateSettings --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/block/","title":"Index","text":"<p>This category only contains two commands at the moment. Their purpose is to allow you to create a blocklist of both users and channels where you really wouldn't want to be interacting with the bot, at a personal level.</p> <p>Note</p> <p>Remember, to unblock a channel or user, you just have to execute the same command you executed when you set it up.</p> <ul> <li>'/block channel ' Info <p>Block a specific channel for you personally. Nobody, not even admins, will be able to transform you on said channels. If you're transformed on the server, it will not show up on blocked channels.</p> <ul> <li><code>/block user [user]</code></li> </ul> Info <p>Block a specific user for you personally. They won't be able to interact with you on that server.</p> <p>Warning</p> <p>Remember: blocking another user only blocks them in the server you're currently on, not on all servers.</p> <p>They won't be able to interact with you through the bot in any manner.</p> <ul> <li><code>/block category &lt;category&gt;</code></li> </ul> Info <p>Block a specific channel category for you personally. Nobody, not even admins, will be able tp transform you on said channel category. If you're transformed on the server, it will not show up on blocked channels.</p>"},{"location":"commands/block/category/","title":"/block category","text":""},{"location":"commands/block/category/#syntax","title":"Syntax","text":"<p><code>/block channel &lt;category&gt;</code></p> <ul> <li><code>category</code>: A valid Discord Channel Category. If not provided, defaults to the current channel category.</li> </ul>"},{"location":"commands/block/category/#usage","title":"Usage","text":"<p>This command is to be used when a user wants to block a channel category so that they, and only they, won't interact with the bot in said channel category. This also means that, even if you're transformed globally, your messages won't be altered on a blocked channel category.</p> <p>Note</p> <p>This command can also be used to unblock previously blocked channel categories, which will be automatically handled.</p>"},{"location":"commands/block/category/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckCategory[category parameter provided]\n    CheckCategory --&gt; |False| AssignCategory[[category = ctx.channel. category]]\n    CheckCategory --&gt; |True| BlockCategory[[Block or unblock the selected category]]\n    AssignCategory --&gt; BlockCategory\n    BlockCategory --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/block/channel/","title":"/block channel","text":""},{"location":"commands/block/channel/#syntax","title":"Syntax","text":"<p><code>/block channel &lt;channel&gt;</code></p> <ul> <li><code>channel</code>: A valid Discord Channel. If not provided, defaults to the current channel.</li> </ul>"},{"location":"commands/block/channel/#usage","title":"Usage","text":"<p>This command is to be used when a user wants to block a channel so that they, and only they, won't interact with the bot in said channels. This also means that, even if you're transformed globally, your messages won't be altered on a blocked channel.</p> <p>Note</p> <p>This command can also be used to unblock previously blocked channels, which will be automatically handled.</p>"},{"location":"commands/block/channel/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckChannel[channel parameter provided]\n    CheckChannel --&gt; |False| AssignChannel[[channel = ctx.channel]]\n    CheckChannel --&gt; |True| BlockChannel[[Block or unblock the selected channel]]\n    AssignChannel --&gt; BlockChannel\n    BlockChannel --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/block/user/","title":"/block user","text":""},{"location":"commands/block/user/#syntax","title":"Syntax","text":"<p><code>/block user [user]</code></p> <ul> <li><code>user</code>: A valid Discord User.</li> </ul>"},{"location":"commands/block/user/#usage","title":"Usage","text":"<p>This command allows the user to block another user, which means they will be unable to interact with you through the bot.</p> <p>Note</p> <p>This block will only apply inside the server you're currently on.</p> <p>Note</p> <p>This command can also be used to unblock previously blocked users, which will be automatically handled.</p>"},{"location":"commands/block/user/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; BlockUser[[Block the user]]\n    BlockUser --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/","title":"Index","text":"<p>Get commands allow you to see what a user's settings are. These are in a different section to set and clear commands because their outputs and how they're read might differ, so this is the best way to provide proper clarity on them.</p> <ul> <li><code>/get settings &lt;user&gt;</code></li> </ul> Info <p>This command will show you what modifiers are turned on and which are turned off, and will also show you the stutter chance. It will NOT show you the biography, claim, or eternal status of a user.</p> <ul> <li><code>/get claim &lt;user&gt;</code></li> </ul> Info <p>Displays whether the user is claimed or not, and, if they are, by whom.</p> <ul> <li><code>/get censors &lt;user&gt;</code></li> </ul> Info <p>Displays a list of censored words and their replacements.</p> <ul> <li><code>/get sprinkles &lt;user&gt;</code></li> </ul> Info <p>Displays a list of the sprinkles a user has; with their individual chances.</p> <ul> <li><code>/get muffle &lt;user&gt;</code></li> </ul> Info <p>Displays a list of the muffles a user has active; with their individual chances.</p> <p>Bug</p> <p>There's a known issue, due to which, the alternative muffle settings won't show up on this list.</p> <ul> <li><code>/get prefixes &lt;user&gt;</code></li> </ul> Info <p>Displays a list of the prefixes a user has active; with their individual chances.</p> <ul> <li><code>/get suffixes &lt;user&gt;</code></li> </ul> Info <p>Displays a list of the suffixes a user has active; with their individual chances.</p> <ul> <li><code>/get bio &lt;user&gt;</code></li> </ul> Info <p>Get the biography of a user.</p> <ul> <li><code>/get transformed</code></li> </ul> Info <p>Displays a list of all the transformed users in the current server, alongside the name of their transformed form.</p> <p>Bug</p> <p>Some of the mentions in the embedded message may display as &lt;@number&gt;. This is an error on the Discord client, and we can't do anything to fix it from our side, at least with how the command is currently set up.</p> <p>See this feature request for a possible fix.</p> <ul> <li><code>/get image &lt;user&gt;</code></li> </ul> Info <p>Gives you the avatar image of a transformed user.</p>"},{"location":"commands/get/#the-extract_tf_data-function","title":"The <code>extract_tf_data</code> function","text":"<p>For more information on this function, check the expanation given on the set and clear command page.</p>"},{"location":"commands/get/bio/","title":"/get bio","text":""},{"location":"commands/get/bio/#syntax","title":"Syntax","text":"<p><code>/get bio &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/bio/#usage","title":"Usage","text":"<p>Lets you see the biography this user has set, if any.</p>"},{"location":"commands/get/bio/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/censors/","title":"/get censors","text":""},{"location":"commands/get/censors/#syntax","title":"Syntax","text":"<p><code>/get censors &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/censors/#usage","title":"Usage","text":"<p>Lets you see the censors (and their respective replacements) this user has active, if any.</p>"},{"location":"commands/get/censors/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/claim/","title":"/get claim","text":""},{"location":"commands/get/claim/#syntax","title":"Syntax","text":"<p><code>/get claim &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/claim/#usage","title":"Usage","text":"<p>Lets you see who, if anyone, has claimed this user.</p>"},{"location":"commands/get/claim/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/image/","title":"/get image","text":""},{"location":"commands/get/image/#syntax","title":"Syntax","text":"<p><code>/get image &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/image/#usage","title":"Usage","text":"<p>Lets you see the avatar image this user has set, in full quality.</p>"},{"location":"commands/get/image/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/muffle/","title":"/get muffle","text":""},{"location":"commands/get/muffle/#syntax","title":"Syntax","text":"<p><code>/get muffle &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/muffle/#usage","title":"Usage","text":"<p>Lets you see the muffles (and their respective chances) this user has active, if any. Also, displays alternative muffles in a separate embed.</p>"},{"location":"commands/get/muffle/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; CheckMuffles[[Check if there's muffles active]]\n    CheckMuffles --&gt; SendMuffles[[Send normal muffles]]\n    SendMuffles --&gt; CheckAlt[[Check if there's alternative muffles]]\n    CheckAlt --&gt; SendAlt[[Send alternative muffles]]</code></pre>"},{"location":"commands/get/prefixes/","title":"/get prefixes","text":""},{"location":"commands/get/prefixes/#syntax","title":"Syntax","text":"<p><code>/get prefixes &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/prefixes/#usage","title":"Usage","text":"<p>Lets you see the prefixes (and their respective chances) this user has active, if any.</p>"},{"location":"commands/get/prefixes/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/settings/","title":"/get settings","text":""},{"location":"commands/get/settings/#syntax","title":"Syntax","text":"<p><code>/get settings &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/settings/#usage","title":"Usage","text":"<p>Lets you see what settings the user has on or off. Doesn't display claim status, biography, or eternal status of a user.</p>"},{"location":"commands/get/settings/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/sprinkles/","title":"/get sprinkles","text":""},{"location":"commands/get/sprinkles/#syntax","title":"Syntax","text":"<p><code>/get sprinkles &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/sprinkles/#usage","title":"Usage","text":"<p>Lets you see the sprinkles (and their respective chances) this user has active, if any.</p>"},{"location":"commands/get/sprinkles/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/suffixes/","title":"/get suffixes","text":""},{"location":"commands/get/suffixes/#syntax","title":"Syntax","text":"<p><code>/get suffixes &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/get/suffixes/#usage","title":"Usage","text":"<p>Lets you see the suffixes (and their respective chances) this user has active, if any.</p>"},{"location":"commands/get/suffixes/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/get/transformed/","title":"/get transformed","text":""},{"location":"commands/get/transformed/#syntax","title":"Syntax","text":"<p><code>/get transformed</code></p>"},{"location":"commands/get/transformed/#usage","title":"Usage","text":"<p>Displays a list of all the transformed users in the current server, alongside the name of their transformed form.</p> <p>Bug</p> <p>Some of the mentions in the embedded message may display as &lt;@number&gt;. This is an error on the Discord client, and we can't do anything to fix it from our side, at least with how the command is currently set up.</p> <p>See this feature request for a possible fix.</p>"},{"location":"commands/get/transformed/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; LoadData[[Load data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; GenerateMessage[[Generate the final embedded message]]\n    GenerateMessage --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/others/","title":"Index","text":"<p>These commands didn't fit in any other category, since they are all general purpose, and live inside the main file of the bot, not on a separate file that hosts just those commands and their related function.</p> <ul> <li><code>/report [user] [reason]</code></li> </ul> Info <p>This command sends a GLOBAL REPORT to the BOT OWNER. Use this command when someone:</p> <pre><code>- Breaks [the bot's Terms of Service]()\n- Breaks [Discord's Terms of Service](https://discord.com/terms)\n- You believe is misusing the bot in a way that justifies their permanent\n  revoke of the service.\n</code></pre> <p>Danger</p> <p>Do not use this command lightly, or you might get banned yourself.</p> <ul> <li><code>/info</code></li> </ul> Info <p>Get some information about the bot.</p> <ul> <li><code>/legal</code></li> </ul> Info <p>Legal information of the bot (Privacy Policy and Terms of Service).</p> <ul> <li><code>/invite</code></li> </ul> Info <p>Get the invite link for the bot, so you can invite it to your very own server!</p> <ul> <li><code>/ping</code></li> </ul> Info <p>Ping the bot and see how much network delay it has.</p>"},{"location":"commands/others/info/","title":"/info","text":""},{"location":"commands/others/info/#syntax","title":"Syntax","text":"<p><code>/info</code></p>"},{"location":"commands/others/info/#usage","title":"Usage","text":"<p>The <code>/info</code> command is meant to be used just to get a small embedded command that allows you to see some info about the bot.</p>"},{"location":"commands/others/info/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    ReceiveCommand[Command received] --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/others/invite/","title":"/invite","text":""},{"location":"commands/others/invite/#syntax","title":"Syntax","text":"<p><code>/invite</code></p>"},{"location":"commands/others/invite/#usage","title":"Usage","text":"<p>The <code>/invite</code> command is meant to be used to get a link to invite the bot to your own server(s).</p>"},{"location":"commands/others/invite/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    ReceiveCommand[Command received] --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/others/legal/","title":"/legal","text":""},{"location":"commands/others/legal/#syntax","title":"Syntax","text":"<p><code>/legal</code></p>"},{"location":"commands/others/legal/#usage","title":"Usage","text":"<p>The <code>/legal</code> command is meant to be used just to get a link to the Terms of Service and Privacy Policy, as presented on this documentation.</p>"},{"location":"commands/others/legal/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    ReceiveCommand[Command received] --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/others/ping/","title":"/ping","text":""},{"location":"commands/others/ping/#syntax","title":"Syntax","text":"<p><code>/ping</code></p>"},{"location":"commands/others/ping/#usage","title":"Usage","text":"<p>The <code>/ping</code> command is meant to be used to get the delay the bot is suffering at the moment, and is the recommended command to test whether the bot is connected or not.</p>"},{"location":"commands/others/ping/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    ReceiveCommand[Command received] --&gt; GetPing[[Get the delay the bot is suffering at the moment]]\n    GetPing --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/others/report/","title":"/report","text":""},{"location":"commands/others/report/#syntax","title":"Syntax","text":"<p><code>/report [user] [reason]</code></p> <ul> <li> <p><code>user</code>: A valid Discord User.</p> </li> <li> <p><code>reason</code>: A string defining what the reason is for the report, preferably clearly             described in a concise manner.</p> </li> </ul>"},{"location":"commands/others/report/#usage","title":"Usage","text":"<p>The use of this command is reserved specifically to report wrongdoers that are in direct vioation of the bot's Terms of Service or its Privacy Policy. It can also be used to report a misuse of the bot in any other manner that hasn't been appropriately handled by the server's own moderation team.</p> <p>The bot will send this report to a private channel that only the bot owner can access, including on the message: user that was reported, user that sent the report, reason for the report, server name, and server owner.</p> <p>Danger</p> <p>Do not use this command lightly. If you're found to be misusing this command, you might be permanently banned from using the bot again.</p>"},{"location":"commands/others/report/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckReason[[Check that a proper reason was provided]] \n    CheckReason --&gt; AskConfirmation[[Ask the user to confirm the report and warn them about possible consequences]]\n    AskConfirmation --&gt; Report[[Send the report message to the configured channel]]\n    Report --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/","title":"Index","text":"<p>The \"set\" commands allow you to, as the name implies, set (and modify) almost every setting a transformed user has. For now, most of these settings, excluding the biography, are speech modifiers that alter their messages, in one way or another.</p> <p>The \"clear\" commands, on the other hand, allow you to clear the settings the user has, individually or all at once.</p> <p>Warning</p> <p>Remember that there's no undo button for these commands; clearing a setting will mean that you'll have to set it up again if you decide it was something you wanted.</p> Info <p>All clear commands follow the same structure: <code>/clear [modifier] &lt;user&gt; &lt;word&gt;</code> where the modifier is the same keyword used by the respective set command. User can always be specified, but the word field can only be specified when the modifier takes a word as an input, i.e., prefix, suffix, muffle, sprinkle, censor...</p> <p>Warning</p> <p>Not providing a word value when executing a clear command that accepts it will result in the removal of ALL modifiers of that class, i.e., if a user has seven sprinkles set, and you use <code>/clear sprinkle &lt;user&gt;</code>, without the word parameter, all seven will be removed from the user. Exercise caution.</p> <p>For consistency, all chance values default to 30% if unspecified, for every set command listed here.</p> <ul> <li><code>/clear all_fields &lt;user&gt;</code></li> </ul> Info <p>Clears the entirety of a user's configuration (except claims), effectively undoing any previous set commands.</p> <p>Warning</p> <p>We recommend you save a transformation before clearing all the settings of a user. That will reduce the chance of you regretting it later.</p> <ul> <li><code>/set prefix [prefix] &lt;chance&gt; &lt;user&gt; &lt;whitespace&gt;</code></li> </ul> Info <p>Sets a prefix string that will go before the message the user has sent, with a certain random chance of this happening.</p> <ul> <li><code>/set suffix [suffix] &lt;chance&gt; &lt;user&gt; &lt;whitespace&gt;</code></li> </ul> Info <p>Sets a suffix string that will go after the message the user has sent, with a certain random chance of this happening.</p> <ul> <li><code>/set big &lt;user&gt;</code></li> </ul> Info <p>Makes all the text the user writes big.</p> <ul> <li><code>/set small &lt;user&gt;</code></li> </ul> Info <p>Makes all the text the user writes small.</p> <ul> <li><code>/set hush &lt;user&gt;</code></li> </ul> Info <p>\"Hushes\" the user, that is to say, makes it into a spoiler, effectively  emulating the user being unable to speak, but maintaining a certain level of mutual understanding through the underlying text.</p> <ul> <li><code>/set backwards &lt;user&gt;</code></li> </ul> Info <p>Makes the user's text be inverted completely.</p> <ul> <li><code>/set eternal &lt;user&gt;</code></li> </ul> Info <p>Note</p> <p>Requires the user to have been claimed by another user.</p> <p>\"Eternally\" transforms a user, that is to say, makes the user unable to modify themselves or be modified by anyone that isn't the user that claimed them.</p> <ul> <li><code>/set censor [censor] [replacement] &lt;user&gt;</code></li> </ul> Info <p>\"Censors\" a word, by replacing it with whatever replacement you choose every time the user tries to say it.</p> <ul> <li><code>/set sprinkle [sprinkle] &lt;chance&gt; &lt;user&gt;</code></li> </ul> Info <p>Randomly sprinkles a word in between whatever the user says, without replacing any other words.</p> <ul> <li><code>/set muffle [muffle] &lt;chance&gt; &lt;alt&gt; &lt;user&gt;</code></li> </ul> Info <p>\"Muffles\" a message, effectively replacing random words with whatever you choose, or, if the alternative mode is on, it will substitute entire messages.</p> <ul> <li><code>/set stutter &lt;chance&gt; &lt;user&gt;</code></li> </ul> Info <p>Makes the user stutter. T-this makes t-them talk in a s-similar manner to t-this.</p> <ul> <li><code>/set bio [biography] &lt;user&gt;</code></li> </ul> Info <p>Sets the user's biography, which, at the moment, is mainly used to describe saved characters to others in an easy manner, though it can be used to list any kind of information, like limits, kinks, information, etc.</p>"},{"location":"commands/set_and_clear/#the-extract_tf_data-function","title":"The <code>extract_tf_data</code> function","text":"<p>This function is used in all <code>/set</code> and <code>/clear</code> commands, so it is only fair to explain it here. If you don't want the technical ramble and logic explanation, you may skip this section with no problems.</p> <p>This function is located inside the <code>utils.py</code> file, and serves as a utility for all of these functions, because they all need to do the same checks and require variations of the same data.</p> <p>The function signature contains four variables, <code>ctx</code>, representing the Discord environment provided by the API and PyCord, <code>user</code>, representing the Discord User whose data we want to extract, <code>get_command</code>, which is a boolean stating whether the origin of the request is a <code>/get</code> command, and <code>channel</code>, which refers to a Discord Channel to extract the data at (currently unused, in practice).</p> <p>The function returns a boolean, indicating whether a user is a valid target or not, the data of said user, and, finally, the user. The simplified logic diagram is shown here.</p> <p>Any time the function is used, the pertinent command checks if the user is valid or not (so, whether the first return argument is True), and this step will be omitted in future logic trees, to avoid unnecessary clutter.</p> <pre><code>flowchart TD\n    CheckUser[user is None]\n    CheckUser --&gt; |True| AssignUser[[user == ctx.user]]\n    CheckUser --&gt; |False| CheckTransformed[[Check if the user is transformed]]\n    AssignUser --&gt; CheckTransformed\n    CheckTransformed --&gt; |Not Transformed| SendAnswerError[[Send answer, operation failed]]\n    CheckTransformed --&gt; |Transformed| LoadData[[Load data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt;CheckClaim[Is user claimed by another user and get_command == False?]\n    CheckClaim --&gt; |Yes| SendAnswerError\n    CheckClaim --&gt; |No| ReturnData[[Returns True, data, and the user]]\n    SendAnswerError --&gt; ReturnNone[[Returns False, None, and None]]</code></pre>"},{"location":"commands/set_and_clear/#simplified-internal-logic-of-clear-commands","title":"Simplified internal logic of <code>/clear</code> commands","text":"<p>All the <code>/clear</code> commands (except <code>/clear all_fields</code>, which has its own article), follow more-or-less the same logic as their <code>/set</code> counterparts, but instead of adding the modifier, they clear it (and they don't apply any extra string modifications, ike the affixes adding whitespace). Due to this, simplified logic sections and diagrams won't be specifically added (at this point, at least) for these commands.</p>"},{"location":"commands/set_and_clear/all_fields/","title":"/clear all_fields","text":""},{"location":"commands/set_and_clear/all_fields/#syntax","title":"Syntax","text":"<p><code>/clear all_fiels &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           clear modifiers from.</li> </ul>"},{"location":"commands/set_and_clear/all_fields/#usage","title":"Usage","text":"<p>Clears all modifiers from a transformed user.</p>"},{"location":"commands/set_and_clear/all_fields/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; ClearModifiers[[Clear all modifiers]]\n    ClearModifiers --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/backwards/","title":"/set backwards","text":""},{"location":"commands/set_and_clear/backwards/#syntax","title":"Syntax","text":"<p><code>/set backwards &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/set_and_clear/backwards/#usage","title":"Usage","text":"<p>This command will apply the backwards text modifier, which inverts the order of the letters on the message.</p>"},{"location":"commands/set_and_clear/backwards/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; CheckModifier[[Check that the modifier isn't already being applied]]\n    CheckModifier --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/big/","title":"/set big","text":""},{"location":"commands/set_and_clear/big/#syntax","title":"Syntax","text":"<p><code>/set big &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/set_and_clear/big/#usage","title":"Usage","text":"<p>This command will apply the big text modifier to the specified user. This modifier will make it so that every message the user speaks will be displayed as big text, by using Discord's Markdown <code>#</code> modifier in front of the message.</p>"},{"location":"commands/set_and_clear/big/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; CheckModifier[[Check that the modifier isn't already being applied]]\n    CheckModifier --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/bio/","title":"/set bio","text":""},{"location":"commands/set_and_clear/bio/#syntax","title":"Syntax","text":"<p><code>/set bio [biography] &lt;user&gt;</code></p> <ul> <li> <p><code>biography</code>: A valid string, that will be set as the biography of the user.</p> </li> <li> <p><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</p> </li> </ul>"},{"location":"commands/set_and_clear/bio/#usage","title":"Usage","text":"<p>This command will set a biography for the selected user. This doesn't have any defined practical usage, and can be used for anything that requires storing a string, from indicating the author of a transformation, the expected usage, or a backstory.</p>"},{"location":"commands/set_and_clear/bio/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/censor/","title":"/set censor","text":""},{"location":"commands/set_and_clear/censor/#syntax","title":"Syntax","text":"<p><code>/set censor [censor] [replacement] &lt;user&gt;</code></p> <ul> <li> <p><code>censor</code>: A string, that will be censored and replaced.</p> </li> <li> <p><code>replacement</code>: A string, that will replace the censored word.</p> </li> <li> <p><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</p> </li> </ul>"},{"location":"commands/set_and_clear/censor/#usage","title":"Usage","text":"<p>This command will apply the censor text modifier, which will replace every instance (case-insensitive) of the <code>censor</code> parameter with the <code>replacement</code> parameter, effectively censoring said word. Multiple censored pairs can be set.</p>"},{"location":"commands/set_and_clear/censor/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/eternal/","title":"/set eternal","text":""},{"location":"commands/set_and_clear/eternal/#syntax","title":"Syntax","text":"<p><code>/set eternal &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/set_and_clear/eternal/#usage","title":"Usage","text":"<p>This command will apply the eternal modifier, which will make it so that the user is unable to be transformed or modified by anyone but the user that has previously claimed them.</p> <p>Info</p> <p>The user should be claimed to be able to use this command. Not only that, but you must be the user that claimed them, or the command will fail.</p>"},{"location":"commands/set_and_clear/eternal/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; CheckClaim[[Check that the user is claimed]]\n    CheckClaim --&gt; CheckModifier[[Check that the modifier isn't already being applied]]\n    CheckModifier --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre> <p>Note</p> <p>The command doesn't check whether the owner of the claim is the user executing the command, since the <code>extract_tf_data</code> function already executes that check.</p>"},{"location":"commands/set_and_clear/hush/","title":"/set hush","text":""},{"location":"commands/set_and_clear/hush/#syntax","title":"Syntax","text":"<p><code>/set hush &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/set_and_clear/hush/#usage","title":"Usage","text":"<p>This command will apply the hush text modifier, which will \"hush\" the user, by \"censoring\" all of their messages, using Discord's Markdown modifier, <code>||</code>, to achieve this result.</p>"},{"location":"commands/set_and_clear/hush/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; CheckModifier[[Check that the modifier isn't already being applied]]\n    CheckModifier --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/muffle/","title":"/set muffle","text":""},{"location":"commands/set_and_clear/muffle/#syntax","title":"Syntax","text":"<p><code>/set muffle [muffle] &lt;chance&gt; &lt;alt&gt; &lt;user&gt;</code></p> <ul> <li> <p><code>muffle</code>: A string, to muffle words throughout the messages sent by the user.</p> </li> <li> <p><code>chance</code>: An integer from 0 to 100, defaults 30. The chance, in percentage, of the             muffle being used for a given word in a message.</p> </li> <li> <p><code>alt</code>: A boolean, defaults false. If true, enables the alternative muffle for the          input word, with the specified chance.</p> </li> <li> <p><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</p> </li> </ul>"},{"location":"commands/set_and_clear/muffle/#usage","title":"Usage","text":"<p>This command will apply the muffle ext modifier, which will replace random words from the user's messages with the strings you set. If <code>alt</code> is set to be true, the alternative muffle mode will be used, which will replace entire messages with the strings you set. You can even combine the alternative and normal muffle in the same user with no problems!</p>"},{"location":"commands/set_and_clear/muffle/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; CheckAlt[[Check if we have to set alternative or normal muffle]]\n    CheckAlt --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/prefix/","title":"/set prefix","text":""},{"location":"commands/set_and_clear/prefix/#syntax","title":"Syntax","text":"<p><code>/set prefix [prefix] &lt;chance&gt; &lt;user&gt; &lt;whitespace&gt;</code></p> <ul> <li> <p><code>prefix</code>: A string, to add to the prefix list.</p> </li> <li> <p><code>chance</code>: An integer from 0 to 100, defaults 30. The chance, in percentage, of the             prefix being used for a given message.</p> </li> <li> <p><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</p> </li> <li> <p><code>whitespace</code>: A boolean, defaults true. Whether to include whitespace after the                 prefix, so it doesn't join the message after it.</p> </li> </ul>"},{"location":"commands/set_and_clear/prefix/#usage","title":"Usage","text":"<p>This command is used to add a prefix modifier, that is to say, a word or string that will appear before certain messages, with a specific chance of it occurring.</p>"},{"location":"commands/set_and_clear/prefix/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; AddWhitespace[[Add whitespace if necessary]]\n    AddWhitespace --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/small/","title":"/set small","text":""},{"location":"commands/set_and_clear/small/#syntax","title":"Syntax","text":"<p><code>/set small &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</li> </ul>"},{"location":"commands/set_and_clear/small/#usage","title":"Usage","text":"<p>This command will apply the small text modifier to the specified user. This modifier will make it so that every message the user speaks will be displayed as small text, by using a combination of Discord's Markdown <code>-#</code> modifier, and an alphabet substitution for a set of small Unicode characters. When using this modifier, some letters might be replaced by other similar symbols, due to limitations.</p>"},{"location":"commands/set_and_clear/small/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; CheckModifier[[Check that the modifier isn't already being applied]]\n    CheckModifier --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/sprinkle/","title":"/set sprinkle","text":""},{"location":"commands/set_and_clear/sprinkle/#syntax","title":"Syntax","text":"<p><code>/set sprinkle [sprinkle] &lt;chance&gt; &lt;user&gt;</code></p> <ul> <li> <p><code>sprinkle</code>: A string, to be sprinkled throughout the messages sent by the user.</p> </li> <li> <p><code>chance</code>: An integer from 0 to 100, defaults 30. The chance, in percentage, of the             sprinkle being used for a given word in a message.</p> </li> <li> <p><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</p> </li> </ul>"},{"location":"commands/set_and_clear/sprinkle/#usage","title":"Usage","text":"<p>This command will apply the sprinkle text modifier, which will sprinkle the word you have set in between the words of the messages the user sends, with a certain random chance. Multiple sprinkles can be set, with individual chances.</p>"},{"location":"commands/set_and_clear/sprinkle/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/stutter/","title":"/set stutter","text":""},{"location":"commands/set_and_clear/stutter/#syntax","title":"Syntax","text":"<p><code>/set stutter &lt;chance&gt; &lt;user&gt;</code></p> <ul> <li> <p><code>chance</code>: An integer from 0 to 100, defaults 30. The chance, in percentage, of the             user stuttering.</p> </li> <li> <p><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</p> </li> </ul>"},{"location":"commands/set_and_clear/stutter/#usage","title":"Usage","text":"<p>This command will apply the stutter text modifier, which will make the user stutter with a certain chance. If the chance is high, hey might even have multi-letter stuttering.</p>"},{"location":"commands/set_and_clear/stutter/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/set_and_clear/suffix/","title":"/set suffix","text":""},{"location":"commands/set_and_clear/suffix/#syntax","title":"Syntax","text":"<p><code>/set suffix [suffix] &lt;chance&gt; &lt;user&gt; &lt;whitespace&gt;</code></p> <ul> <li> <p><code>suffix</code>: A string, to add to the suffix list.</p> </li> <li> <p><code>chance</code>: An integer from 0 to 100, defaults 30. The chance, in percentage, of the             suffix being used for a given message.</p> </li> <li> <p><code>user</code>: A valid Discord User, defaults to the user executing the command. User to           apply this modifier to.</p> </li> <li> <p><code>whitespace</code>: A boolean, defaults true. Whether to include whitespace before the                 suffix, so it doesn't join the message before it.</p> </li> </ul>"},{"location":"commands/set_and_clear/suffix/#usage","title":"Usage","text":"<p>This command is used to add a suffix modifier, that is to say, a word or string that will appear after certain messages, with a specific chance of it occurring.</p>"},{"location":"commands/set_and_clear/suffix/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; ExtractTfData[[extract_tf_data]]\n    ExtractTfData --&gt; AddWhitespace[[Add whitespace if necessary]]\n    AddWhitespace --&gt; ApplyModifier[[Apply the modifier]]\n    ApplyModifier --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/transformation/","title":"Index","text":"<p>The commands in this category should be the easiest to use, at least at a basic level. They allow users to transform themselves and others, and are the barrier of entry to 95% of the many other functions the bot has at your disposal. We recommend checking out the Basic TransforMate Tutorial to acquire some basic knowledge on the usage of these commands.</p> <p>Even though you don't have to, we strongly recommend you check out the full documentation on these commands, at least for the /transform command. If you have to read anything in detail from this entire documentation, let it be this command. It's the most complex, but also the most versatile.</p> <ul> <li><code>/transform &lt;user&gt; &lt;into&gt; &lt;image_url&gt; &lt;channel&gt; &lt;brackets&gt; &lt;copy&gt; &lt;merge&gt;</code></li> </ul> Info <p>In its most basic form, allows you to transform yourself and other users easily. You can also copy other users, or even merge with them, if properly used. For those functions, please check either the command's full documentation page or the Basic Twinning Tutorial.</p> <ul> <li><code>/goback &lt;user&gt;</code></li> </ul> Info <p>Go back to your normal self, or, if you have been transformed previously, you'll go back to that form.</p> <ul> <li><code>/(un)claim [user]</code></li> </ul> Info <p>(Un)claim another user for yourself, ergo making it so you're the only one allowed to transform or otherwise modify the user you claim, as if they were fully yours.</p> <ul> <li><code>/safeword</code></li> </ul> Info <p>For those who have been claimed against their will, or think the user that has claimed them has overstepped, this command is the one to come to your rescue, always there when you need it.</p> <ul> <li><code>/export_tf &lt;user&gt; &lt;file&gt;</code></li> </ul> Info <p>When you want to save a tf for later, be it as a file or as a string. It also makes transformation way easier to share!</p> <ul> <li><code>/import_tf &lt;user&gt;</code></li> </ul> Info <p>Imports a saved tf into either yourself or another user. Very much like a very compact /transform.</p>"},{"location":"commands/transformation/claim_and_unclaim/","title":"/claim and /unclaim","text":""},{"location":"commands/transformation/claim_and_unclaim/#syntax","title":"Syntax","text":"<p><code>/(un)claim [user]</code></p> <ul> <li><code>user</code>: A valid Discord User to (un)claim.</li> </ul>"},{"location":"commands/transformation/claim_and_unclaim/#usage","title":"Usage","text":"<p>The <code>/claim</code> and <code>/unclaim</code> commands are used to claim and unclaim users, respectively. A claimed user will only be able to be altered by the user that claimed them until they're unclaimed or use the <code>/safeword</code> command.</p>"},{"location":"commands/transformation/claim_and_unclaim/#simplified-internal-logic-for-claim","title":"Simplified internal logic for <code>/claim</code>","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckUser[[Check that the user has provided a valid Discord User that isn't themselves]]\n    CheckUser --&gt; SecondCheckUser[[Check that the chosen user is currently transformed]]\n    SecondCheckUser --&gt; LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; CheckClaim[[Check that the user isn't already claimed]]\n    CheckClaim --&gt; Claim[[Claim the user]]\n    Claim --&gt; SendAnswer[[Send answer]]\n    SendAnswer --&gt; Log[[Log the claiming]]</code></pre>"},{"location":"commands/transformation/claim_and_unclaim/#simplified-logic-for-unclaim","title":"Simplified logic for <code>/unclaim</code>","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckUser[[Check that the user has provided a valid Discord User that isn't themselves]]\n    CheckUser --&gt; SecondCheckUser[[Check that the chosen user is currently transformed]]\n    SecondCheckUser --&gt; LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; CheckClaim[[Check that the user is claimed and that the owner is the current user]]\n    CheckClaim --&gt; Unclaim[[Unclaim the user]]\n    Unclaim --&gt; SendAnswer[[Send answer]]\n    SendAnswer --&gt; Log[[Log the unclaiming]]</code></pre>"},{"location":"commands/transformation/export_tf/","title":"/export_tf","text":""},{"location":"commands/transformation/export_tf/#syntax","title":"Syntax","text":"<p><code>/export_tf &lt;user&gt; &lt;file&gt;</code></p> <ul> <li> <p><code>user</code>: A valid Discord User to export their transformation data. If not provided,           the user executing the command will be used.</p> </li> <li> <p><code>file</code>: A boolean, defaults true. If set to false, will return the plain string,           otherwise returns a .tf file containing the string.</p> </li> </ul>"},{"location":"commands/transformation/export_tf/#usage","title":"Usage","text":"<p>The <code>/export_tf</code> command is used in coordination with the <code>/import_tf</code> to save and load transformation data to and from flies and/or strings.</p>"},{"location":"commands/transformation/export_tf/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckUser[user parameter is provided]\n    CheckUser --&gt; |False| AssignUser[[user == ctx.user]]\n    CheckUser --&gt; |True| CheckBannedGlobal[[Check if user is globally banned]]\n    AssignUser --&gt; CheckBannedGlobal\n    CheckBannedGlobal --&gt; LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; CheckBanned[[Check if the user and/or channel is banned in the server]]\n    CheckBanned --&gt; PrepareString[[Make output string, see below for more info]]\n    PrepareString --&gt; CheckFile[file value]\n    CheckFile --&gt; |False| Output[[Output the result]]\n    CheckFile --&gt; |True| PrepareFile[[Encapsulate the string into a file]]\n    PrepareFile --&gt; Output</code></pre>"},{"location":"commands/transformation/export_tf/#transformation-string-format","title":"Transformation String Format","text":"<p>The Transformation String Format (TSF) is a standard manner of encoding transformation data, in an uncompressed, human-readable, and easy to edit manner. It possesses various revisions, reflecting their equivalent version of the internal TransforMate User Data (TMUD). The numbering starts as 0, where TSFv0 is compatible with TMUDv14 (Both deprecated since v1.5.0).</p> <p>Note</p> <p>The TMUD standard isn't documented as-is and only exists inside the <code>utils.py</code> file of TransforMate, where the changelog is located too.</p> <p>If you would like for a TMUD documentation to be published, please contact us</p> <p>Note</p> <p>The TSF and TMUD format are both open and licencsed under the same license as the bot, so you can use them freely for your projects, modify, and propose changes to them.</p> <p>Warning</p> <p>TSF is backwards compatible with all previous versions (except v0, deprecated since v2.0.0), but TMUD is NOT.</p> <p>Note</p> <p>The documentation for v0 will not be released, but every version since v1 will be kept as an archive for future reference, with the expected behavior when importing said versions of TSF data.</p>"},{"location":"commands/transformation/export_tf/#v12-specification-introduced-in-v220","title":"v1.2 specification (Introduced in v2.2.0)","text":"<p>This revision includes one change from v1.1.</p> <p>To allow for all the modifiers to include commas, all separators will be suffixed with a percent sign (<code>%</code>). In this way, the string will be properly escaped, ensuring the chance of confusion with modifier content becomes minimal.</p>"},{"location":"commands/transformation/export_tf/#v11-specification-introduced-in-v200","title":"v1.1 specification (Introduced in v2.0.0)","text":"<p>This revision includes two changes from v1.0.</p> <p>The first of these has to do with how the version number is indicated. Instead of indicating the compatible TMUD version (TMUDv15, in the case of TSFv1.x), it will now be replaced by a unique TSF version identifier. This identifier is indicated beside every specification, between parentheses.</p> <p>The second change is to the boolean modifiers. Instead of being represented as individual digits, they will now be interpreted as a single hexadecimal integer. This hexadecimal digit encodes the value of these variables in a bitmask-able manner. The number is calculated by adding together all the modifiers set to be true. The bitmask values of the variables are as follows:</p> Variable Bitmask Decimal value Hexadecimal value <code>big</code> 00000001 1 0x1 <code>small</code> 00000010 2 0x2 <code>hush</code> 00000100 4 0x4 <code>backwards</code> 00001000 8 0x8 <p>The number should be included as a bare hexadecimal, without any identifier. For example, if only the <code>big</code> modifier is specified, the number would be a <code>1</code>. If every other modifier except the <code>big</code> modifier, the number would be <code>e</code>. Lowercase is preferred, but not enforced.</p>"},{"location":"commands/transformation/export_tf/#v10-specification-introduced-in-v150","title":"v1.0 specification (Introduced in v1.5.0)","text":"<p>This version counts with 22 parameters separated using the <code>;</code> character. The parameters are displayed here, with an explanation where necessary, and divided into categories for easier understanding. For more information on the modifiers, see their respective modifier page.</p>"},{"location":"commands/transformation/export_tf/#note-data-representation","title":"Note: Data representation","text":"<p>The TSF standard uses three types of data: Booleans, Integers, and Strings. Any object can represent booleans. They will be considered to be false when they're equal to <code>0</code>. Any other value will be interpreted as true, but using <code>1</code> for these cases is the recommended use. Integers are represented by numbers from 0 to 100. Any value outside of these bounds should be clamped when going back and forth between TSF and TMUD, to comply with the standard. Finally, strings are UTF-8 strings of arbitrary length.</p>"},{"location":"commands/transformation/export_tf/#basic-data","title":"Basic data","text":"<p>This data is vital for the TSF data to be valid. Its the information that would normally be given through the <code>/transform</code> command, except for the <code>brackets</code> parameter.</p> <ul> <li> <p><code>version</code>: This parameter encodes the TMUD version this TSF file was written as.              Should always be 15 for TSFv1.0.</p> </li> <li> <p><code>into</code>: Name of the transformed avatar.</p> </li> <li> <p><code>image_url</code>: URL pointing to a valid image that serves as the transformed avatar's                profile picture.</p> </li> </ul>"},{"location":"commands/transformation/export_tf/#boolean-modifiers","title":"Boolean modifiers","text":"<p>These modifiers are always populated, as they represent the four boolean modifiers the bot has available.</p> <ul> <li> <p><code>big</code>: Big text.</p> </li> <li> <p><code>small</code>: Small text.</p> </li> <li> <p><code>hush</code>: Hush messages (Discord spoiler).</p> </li> <li> <p><code>backwards</code>: Invert text.</p> </li> </ul>"},{"location":"commands/transformation/export_tf/#basic-modifiers","title":"Basic modifiers","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD These modifiers aren't separated within themselves, since they are simple strings or ======= These modifiers aren't separated within themselves since they are simple strings or integers.</p> <ul> <li> <p><code>stutter</code>: Stutter modifier. Integer from 0 to 100.</p> </li> <li> <p><code>proxy_prefix</code>: The prefix required to use the transformation in Tupper-like servers.</p> </li> <li> <p><code>proxy_suffix</code>: The suffix required to use the transformation in Tupper-like servers.</p> </li> <li> <p><code>bio</code>: A string with any length, containing a biography or any kind of user-defined          information about the transformation.</p> </li> </ul>"},{"location":"commands/transformation/export_tf/#complex-modifiers","title":"Complex modifiers","text":"<p>These modifiers require a bit more of processing. All of them follow the same pattern though; they are a dictionary, with elements separated with the <code>,</code> character, and pairs denoted with the <code>|</code> character. For all except the <code>censor</code> parameter, these are string-integer pairs, with the integer being a number from 0 to 100. In the case of the <code>censor</code> parameter, it's all string-string pairs.</p> <p>There will always be a boolean value preceding each of these modifiers, indicating if they are active or not.</p> <p>Note</p> <p>This preceding boolean should be removed in a future revision of the standard.</p> <p>Each of these parameters is preceded by another parameter, valued either one or zero, indicating the \"active\" status of these modifiers. If the value is 0, the modifier will be ignored.</p> <ul> <li> <p><code>prefix</code>: Strings that go before the text the user has sent, with a certain chance.</p> </li> <li> <p><code>suffix</code>: Strings that go after the text the user has sent, with a certain chance.</p> </li> <li> <p><code>sprinkle</code>: Strings that are randomly sprinkled between words that the user has sent.</p> </li> <li> <p><code>muffle</code>: Strings that randomly replace words that the user has sent.</p> </li> <li> <p><code>alt_muffle</code>: Strings that fully replace what the user has sent.</p> </li> <li> <p><code>censor</code>: Replaces the first string of the pair for the second one. Case-insensitive.</p> </li> </ul>"},{"location":"commands/transformation/export_tf/#a-note-on-tsf-files","title":"A note on TSF files","text":"<p>The Transformation String Format was originally designed to encode transformation data in an efficient, easy to edit, and more or less human-readable manner. It was originally designed as a translation layer between the JSON of the TMUD format and something that could be easily handled by humans interacting over Discord.</p> <p>An alternative mode was born out of this, the TSF File Format. As of the latest version of TSF, this file format simply consists of a TSF-compliant string, packaged in any kind of readable UTF-8 encoded file, preferably terminated with the <code>.tsf</code> denominator, for ease of identification.</p> <p>It is a supported addition of the standard and can even be used to replace TMUD files, in a more space-efficient manner.</p> <p>Warning</p> <p>Unlike TMUD, TSF does not store the blocked status of users or channels, as of the latest revision. It also does not differentiate between channels and servers, so an actual full TMUD replacement using the current version of TSF would not be viable.</p>"},{"location":"commands/transformation/goback/","title":"/goback","text":""},{"location":"commands/transformation/goback/#syntax","title":"Syntax","text":"<p><code>/goback &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User. Defaults to the user executing the command.</li> </ul>"},{"location":"commands/transformation/goback/#usage","title":"Usage","text":"<p>The <code>/goback</code> command can be used to return a user to their normal self, or, if they have been transformed previously by another user or themselves, to turn them back to their last form.</p>"},{"location":"commands/transformation/goback/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckUser[user parameter provided]\n    CheckUser --&gt; |False| AssignUser[[user == ctx.user]]\n    CheckUser --&gt; |True| LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    AssignUser --&gt; LoadData\n    LoadData --&gt; CheckTransformed[Is the user transformed?]\n    CheckTransformed --&gt; |False| CheckPrevious[[Check hat the user has a form to go back to]]\n    CheckPrevious --&gt; TransformPrevious[[Transform into previous form]]\n    CheckTransformed --&gt; |True| CheckEternal[Is the user eternally transformed?]\n    CheckEternal --&gt; |False| GoBack[[Go back to normal]]\n    CheckEternal --&gt; |True| CheckClaim[[Check that the user wanting to make the user go back has them claimed]]\n    CheckClaim --&gt; GoBack\n    GoBack --&gt; SendAnswer[[Send answer]]\n    TransformPrevious --&gt; SendAnswer\n    SendAnswer --&gt; Log[[Log the transformation, or undoing of such]]</code></pre>"},{"location":"commands/transformation/import_tf/","title":"/import_tf","text":""},{"location":"commands/transformation/import_tf/#syntax","title":"Syntax","text":"<p><code>/import_tf &lt;user&gt;</code></p> <ul> <li><code>user</code>: A valid Discord User to import the transformation data to. If not provided,           the user executing the command will be used.</li> </ul>"},{"location":"commands/transformation/import_tf/#usage","title":"Usage","text":"<p>The <code>/import_tf</code> command is used in coordination with the <code>/export_tf</code> to save and load transformation data to and from files and/or strings.</p>"},{"location":"commands/transformation/import_tf/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckUser[user parameter is provided]\n    CheckUser --&gt; |False| AssignUser[[user == ctx.user]]\n    CheckUser --&gt; |True| CheckBannedGlobal[[Check if user is globally banned]]\n    AssignUser --&gt; CheckBannedGlobal\n    CheckBannedGlobal --&gt; LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; CheckBanned[[Check if the user and/or channel is banned in the server]]\n    CheckBanned --&gt; GetData[[Ask user for TSF data]]\n    GetData --&gt; CheckFile[Did they send a file?]\n    CheckFile --&gt; |True| ProcessFile[[Extract string from file]]\n    CheckFile --&gt; |False| TransformFunction[[transform_function]]\n    ProcessFile --&gt; TransformFunction\n    TransformFunction --&gt; ApplyModifiers[[Apply Modifiers]]\n    ApplyModifiers --&gt; SendAnswer[[Send answer]]</code></pre> <p>Note</p> <p>For more information on the TSF data format, see the documentation for the <code>/export_tf</code> command.</p> <p>Note</p> <p>For more information on <code>transform_function</code>, see the documentation for the <code>/transform</code> command.</p>"},{"location":"commands/transformation/safeword/","title":"/safeword","text":""},{"location":"commands/transformation/safeword/#syntax","title":"Syntax","text":"<p><code>/safeword</code></p>"},{"location":"commands/transformation/safeword/#usage","title":"Usage","text":"<p>The <code>/safeword</code> command allows a claimed user to forcefully unclaim themselves, be it because their claimer forgot to do so, because they are on a rush, or because they feel uncomfortable or abused.</p> <p>Danger</p> <p>If you feel like uncomfortable, or like your roleplay partners are abusing or mistreating you, try to talk to the server's staff. If this doesn't work, use the <code>/report</code> command, or send \"report\" to the bot on its DMs.</p> <p>If this situation is server-wide and you feel like they are misusing the bot, please feel free to contact us</p>"},{"location":"commands/transformation/safeword/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; LoadData[[Load Data]]\n    Database[(Database)] --&gt; LoadData\n    LoadData --&gt; CheckClaimed[[Check that the user is actually claimed]]\n    CheckClaimed --&gt; Unclaim[[Unclaim the user and notify them of their options]]\n    Unclaim --&gt; SendAnswer[[Send answer]]\n    SendAnswer --&gt; Log[[Log the safewording]]</code></pre>"},{"location":"commands/transformation/transform/","title":"/transform","text":""},{"location":"commands/transformation/transform/#syntax","title":"Syntax","text":"<p><code>/transform &lt;user&gt; &lt;into&gt; &lt;image_url&gt; &lt;channel&gt; &lt;brackets&gt; &lt;copy&gt; &lt;merge&gt;</code></p> <ul> <li> <p><code>user</code>: A valid Discord User, representing the user to be transformed. If left           empty, will transform the user executing the command.</p> </li> <li> <p><code>into</code>: A string, that will be used as the name of the transformed user.</p> </li> <li> <p><code>image_url</code>: A valid URL pointing to an image, that will be used as the avatar                for the transformed user.</p> </li> <li> <p><code>channel</code>: A valid Discord Channel. If provided, will make the transformation              exclusive to that channel. On the contrary, if it isn't provided, the              transformation will apply for all the server's channels, except any              that are blocked.</p> </li> <li> <p><code>brackets</code>: A string with the format of \"text\".               Only works in servers that have enabled this feature, and will make               the transformations exclusively happen when the brackets are used,               similar to the working principle of TupperBox. <li> <p><code>copy</code>: A valid Discord User. If provided, will copy the transformation data,           including modifiers from said user. All the other parameters can still           be provided, and will simply override whatever values the other user had           set for them.</p> </li> <p>Warning</p> <p>If no <code>into</code> is separately provided, the name of the avatar will have an extra invisible character added to the end of their name, so that their messages don't merge with the original transformed user's. See the Basic Twinning Tutorial for more info.</p> <ul> <li><code>merge</code>: A boolean. Only provide if <code>copy</code> is also provided. Won't have any effect            otherwise. It will make it so that copied users do not have the extra            invisible character added at the end. See <code>copy</code> parameter for more info.</li> </ul>"},{"location":"commands/transformation/transform/#usages","title":"Usages","text":"<p>This command has three different usages, as described in the Basic TransforMate Tutorial. You can provide only the <code>user</code>, <code>channel</code>, and/or <code>brackets</code> parameters to do a two-step transformation. Providing <code>into</code> and <code>image_url</code> will make a normal transformation, and providing <code>copy</code>, and, optionally, <code>merge</code>, will make a twinning/merging transformation.</p>"},{"location":"commands/transformation/transform/#simplified-internal-logic","title":"Simplified internal logic","text":"<pre><code>flowchart TD\n    CommandReceived[Command Received] --&gt; CheckUser[user parameter provided]\n    CheckUser --&gt; |False| LoadData[[Load Data]]\n    CheckUser --&gt; |True| AssignUser[[user = ctx.user]]\n    Database[(Database)] --&gt; LoadData\n    AssignUser --&gt; LoadData\n    LoadData --&gt; CheckBlocked[[Check if any of the users or the channel is blocked]]\n    CheckBlocked --&gt; CheckClaim[[Check that the user to transform isn't claimed or is owned by the transforming user]]\n    CheckClaim --&gt; CheckSyntax[[Check that the user provided the correct command syntax for this server's settings]]\n    CheckSyntax --&gt; TransformFunction[[transform_function]]\n    TransformFunction --&gt; SendAnswer[[Send answer]]</code></pre>"},{"location":"commands/transformation/transform/#the-transform_function","title":"The <code>transform_function</code>","text":"<p>The <code>transform_function</code> is a utility function inside the code of TransforMate that is used through many of the transformation category commands, and contains most of the transformation logic. Following here is an approximation of said logic.</p> <pre><code>flowchart TD\n    CheckIntoProvided[into parameter provided]\n    CheckIntoProvided --&gt; |True| CheckIntoSyntax[[Check into syntax]]\n    CheckIntoProvided --&gt; |False| CheckImageProvided[image_url parameter provided]\n    CheckIntoSyntax --&gt; CheckImageProvided\n    CheckImageProvided --&gt; |True| CheckImageSyntax[[Check image_url syntax]]\n    CheckImageProvided --&gt; |False| CheckCopyProvided[copy parameter provided]\n    CheckImageSyntax --&gt; CheckCopyProvided\n    Database[(Database)] --&gt; LoadData[[Load data of user to copy]]\n    CheckCopyProvided --&gt; |True| LoadData\n    LoadData --&gt; CheckMerge[merge value]\n    CheckMerge --&gt; |False| AddInvisible[[Add an invisible character at the end of the name]]\n    CheckMerge --&gt; |True| CheckIntoCopy[into parameter provided]\n    AddInvisible --&gt; CheckIntoCopy\n    CheckIntoCopy --&gt; |True| ChangeIntoCopy[[Change into value for provided]]\n    CheckIntoCopy --&gt; |False| CheckImageCopy[image_url parameter provided]\n    ChangeIntoCopy --&gt; CheckImageCopy\n    CheckImageCopy --&gt; |True| ChangeImageCopy[[Change image_url value for provided]]\n    CheckImageCopy --&gt; |False| Transform[[Transform user]]\n    ChangeImageCopy --&gt; Transform\n    CheckCopyProvided --&gt; |False| CheckInto[into parameter provided]\n    CheckInto --&gt; |False| ChangeInto[[Make into be the username]]\n    CheckInto --&gt; |True| CheckImage[image_url parameter provided]\n    ChangeInto --&gt; CheckImage\n    CheckImage --&gt; |False| SecondCheckImage[Does the user have a profile picture?]\n    CheckImage --&gt; |True| Transform\n    SecondCheckImage --&gt; |False| UseDefaultAvatar[[Use a default Discord avatar]]\n    SecondCheckImage --&gt; |True| SetUserPicture[[Make the image_url be the user's Discord profile picture]]\n    UseDefaultAvatar --&gt; Transform\n    SetUserPicture --&gt; Transform\n    Transform --&gt; Log[[Log the transformation]]</code></pre>"},{"location":"legal/privacy_policy/","title":"Privacy Policy","text":"<p>Our Service is intended for use by individuals of at least 13 years of age, and we do not knowingly collect personal information from children under 13. If you are a parent or guardian, and believe that your child has provided us with personal information, please contact us.</p> <p>If we become aware that we have collected personal information from a child under 13 without verification of parental consent, we will take steps to remove that information from our servers. We will also take reasonable steps to ensure that such information is not used or disclosed in any way.</p>"},{"location":"legal/privacy_policy/#data-we-do-collect","title":"Data we DO collect","text":"<p>We DO collect the following types of information from users of our Service:</p> <ul> <li> <p>Server and User IDs: We collect unique identifiers for servers and users to manage   interactions within the Service.</p> </li> <li> <p>Usernames: We collect usernames to identify users within the Service.</p> </li> <li> <p>Image URLs and their associated content: We collect URLs of images uploaded by   users to facilitate image processing and storage, and we may also collect their   content for processing or cache purposes.</p> </li> <li> <p>Text Content: We collect text content from users to process and respond to their   requests. We DO NOT store this text content permanently, but we may retain it   temporarily, for no longer than up to one (1) minute, for processing purposes.</p> </li> <li> <p>Interaction Data: We collect data related to user interactions with the Service,   such as commands issued, responses received, and the content of these interactions,   to provide proper functionality of the Service.</p> </li> </ul>"},{"location":"legal/privacy_policy/#data-we-do-not-collect","title":"Data we DO NOT collect","text":"<p>We DO NOT collect the following types of information:</p> <ul> <li> <p>Personal Identifiable Information (PII): We do not collect any information that can   be used to identify an individual, such as names, email addresses, phone numbers,   or physical addresses.</p> </li> <li> <p>Payment Information: We do not collect any payment-related information, such as   credit card numbers or billing addresses.</p> </li> <li> <p>Sensitive Personal Information: We do not collect sensitive personal information,   such as health data, racial information, marital status, or political opinions.</p> </li> </ul>"},{"location":"legal/privacy_policy/#data-retention","title":"Data Retention","text":"<p>We retain the data we collect for as long as necessary, to provide our Service, and to fulfill the purposes outlined in this Privacy Policy. We will delete or anonymize data when it is no longer necessary for these purposes, or upon user request, unless we are required by law to retain it for a longer period.</p>"},{"location":"legal/privacy_policy/#data-security","title":"Data Security","text":"<p>We take reasonable measures to protect the data we collect from unauthorized access, use, or disclosure. This includes implementing technical and organizational measures to safeguard the data against loss, theft, or misuse. However, no method of transmission over the internet or electronic storage is completely secure, and we cannot guarantee its absolute security.</p>"},{"location":"legal/privacy_policy/#changes-to-this-privacy-policy","title":"Changes to this Privacy Policy","text":"<p>We may update this Privacy Policy from time to time to reflect changes in our practices, or for other operational, legal, or regulatory reasons. We will notify users of any significant changes by posting a notice on our Service or through other communication channels. Your continued use of the Service after any changes to this Privacy Policy will constitute your acceptance of the revised terms.</p>"},{"location":"legal/privacy_policy/#acceptance-of-this-privacy-policy","title":"Acceptance of this Privacy Policy","text":"<p>By using our Service, you acknowledge that you have read and understood this Privacy Policy and agree to its terms, as well as to the Terms of Service. If you do not agree with any part of this Privacy Policy or the Terms of Service, you should not use our Service.</p>"},{"location":"legal/tos/","title":"Terms of Service","text":""},{"location":"legal/tos/#1-introduction","title":"1. Introduction","text":"<ol> <li> <p>The following Terms of Use (hereinafter \"the Terms\"), set forth the conditions for    the proper usage of our service (hereinafter \"the Service\"). The Service is    provided by the TransforMate team (hereinafter \"the Team\"), in the form of the    TransforMate Discord Bot (hereinafter \"the Bot\"); as well as any related services,    features, content, or applications offered by the Team (collectively referred to    as \"the Service\"), including any web interface for the bot (hereinafter \"the Web\").</p> </li> <li> <p>By accessing or using the Service in any manner, be it direct or indirect, you    agree to comply with these Terms. If you do not agree with any part of these Terms,    you must not use the Service.</p> </li> <li> <p>By using the Service, you confirm that you are at least 13 years old. If you are    under 13, you must not use the Service. If you are between 13 years old and the    legal age of majority, according to your jurisdiction's civil law, you may only    use the Service with the consent of a parent or legal guardian, who agrees to be    bound by these Terms, on your behalf.</p> </li> <li> <p>If you are under the age of sexual consent in your jurisdiction, you may not use    the Service to engage in physical or digital sexual activities of any nature.</p> </li> <li> <p>If you have been emancipated in your jurisdiction, or otherwise are legally    considered an adult according to the civil law of your jurisdiction; and as issued    by an officially endorsed court of law, you will be considered as being above the    age of legal maturity for the purposes of these Terms, though you will not be    considered to be above the age of sexual consent. In this manner, paragraph 3 does    not apply to you, whilst paragraph 4 does still apply.</p> </li> </ol>"},{"location":"legal/tos/#2-modification-of-the-terms","title":"2. Modification of the Terms","text":"<ol> <li>The Team reserves the right to modify these Terms at any time. Any changes will    be effective immediately upon posting on the Service or through other communication    channels. Your continued use of the Service after any such changes constitutes    your acceptance of the new Terms and conditions. It is your responsibility to    review these Terms periodically for updates.</li> </ol>"},{"location":"legal/tos/#3-user-environment","title":"3. User environment","text":"<ol> <li> <p>The Service is designed to be used in the environment of a Discord server    (hereinafter \"the Server\"). The Team is not responsible for the content or behavior    of any Server where the Bot is used. The Team does not endorse or take    responsibility for any actions, content, or interactions that occur within a Server.</p> </li> <li> <p>The Team is not responsible for any issues, conflicts, or disputes that may arise    between users of the Service within a Server. Users are encouraged to resolve such    issues independently and in accordance with the rules and guidelines of the    respective Server.</p> </li> <li> <p>The Team is not responsible for the actions or behavior of any Server administrators,    moderators, or other staff.</p> </li> <li> <p>The Team may refuse service to the Server if they deem it necessary, following the    same dispositions outlined in Section 4, without any    repercussions.</p> </li> </ol>"},{"location":"legal/tos/#4-right-to-refuse-service","title":"4. Right to refuse service","text":"<ol> <li> <p>The Team reserves the right to refuse service to anyone, at any time, for any    reason, including, but not limited to: violation of these Terms, a misuse of the    Service, or inappropriate behavior. Any refusal of service will be notified to a    User through any contact channels available. If there are no contact channels for    said User, the service will become void immediately, and they will automatically    waive any rights given to them in the second paragraph of this section. If the    refusal of service applies to a Server, the Server's owner will be notified, and,    if possible, a notification will be issued in one of the Server's public channels.    If this message is at any point deleted by any member of the server with the    ability to do so, the rights outlined in the second paragraph of this will become    void from the moment this action is taken.</p> </li> <li> <p>A refusal of service does not require any prior notice or explanation. As a User,    you have a right to be informed of the reasons for the refusal of Service. To    exercise this right, contact the Team. You also have a    right to appeal; that allows you to ask for a review of this case. The Team may    refuse any of these rights on exceptional occasions if they so see fit, and they    will automatically become void after forty-eight (48) hours from the notification;    or if the User or a Server's owner explicitly refuses this right. In this last    case, not only will the Server owner's rights be revoked, but also those of    everyone in the Server.</p> </li> <li> <p>If a refusal of service is applied to a user, their access to the Service will be    fully revoked. Any future usage of the Service, even when carried out by other    means than the ones originally sanctioned, will be qualified as an immediate    breach of these Terms. This can be sanctioned as described in Section #TODO</p> </li> <li> <p>If a refusal of service is applied to a Server, the Service will be automatically    removed from the Server, and access to the Service can be individually refused or    otherwise revoked to any member of the Server. The second clause applies here, and    no explanations or reasons will have to be provided by the Team.</p> </li> </ol>"},{"location":"legal/tos/#5-user-responsibility","title":"5. User responsibility","text":"<ol> <li> <p>Users are solely responsible for their actions and interactions while using the    Service. This includes, but is not limited to, any content they create, share, or    interact with within the Service.</p> </li> <li> <p>Users must not engage in any behavior that is harmful, abusive, harassing,    threatening, or otherwise inappropriate while using the Service. This includes    but is not limited to, spamming, trolling, or engaging in any form of disruptive    behavior.</p> </li> <li> <p>Users must not use the Service for any illegal or unauthorized purposes. This    includes, but is not limited to, violating any applicable laws, regulations, or    third-party rights, including intellectual property rights, and the    Discord Terms of Service and    Discord Community Guidelines.</p> </li> </ol>"},{"location":"legal/tos/#6-service-availability-modification-and-termination","title":"6. Service availability, modification, and termination","text":"<ol> <li> <p>The Team reserves the right to modify, suspend, or terminate the Service at any    time, without prior notice. This includes, but is not limited to, changes to the    features, functionality, or availability of the Service.</p> </li> <li> <p>The Team is not responsible for any loss or damage that may result from the    modification, suspension, or termination of the Service.</p> </li> <li> <p>The Team provides all the features of the Service for free. This status can change    at any point in the product's life, as long as no previous freely available    features are locked behind payment.</p> </li> <li> <p>Users of the Service have a right to access, download, save, share, and modify the    Service's code, as long as all these actions respect the Terms presented here, and    the code's license.    The Team can revoke this right if they so see fit at any point, with at least    forty-eight (48) hours of notice to the pertinent User.</p> </li> </ol>"},{"location":"legal/tos/#7-disclaimer-of-warranties","title":"7. Disclaimer of warranties","text":"<ol> <li> <p>The Service is provided \"as is\" and \"as available,\" without any warranties of any    kind, either express or implied. The Team does not warrant that the Service will    be uninterrupted, error-free, or free from viruses or other harmful components.</p> </li> <li> <p>The Team does not warrant the accuracy, reliability, or completeness of any    content or information provided through the Service. Users are solely responsible    for their use of the Service and any content they create or interact with.</p> </li> <li> <p>The Team disclaims all warranties, express or implied, including but not limited    to the implied warranties of merchantability, fitness for a particular purpose,    and non-infringement. The Team does not warrant that the Service will meet your    requirements or that any defects in the Service will be corrected.</p> </li> </ol>"},{"location":"legal/tos/#8-limitation-of-liability","title":"8. Limitation of liability","text":"<ol> <li> <p>To the fullest extent permitted by applicable law, the Team shall not be liable    for any direct, indirect, incidental, special, consequential, or punitive damages    arising out of or related to your use of the Service, including but not limited    to: loss of profits, data, or other intangible losses.</p> </li> <li> <p>The Team shall not be liable for any damages resulting from the use or inability    to use the Service, including but not limited to: damages resulting from errors,    omissions, interruptions, defects, delays in operation or transmission, or any    other failure of performance.</p> </li> <li> <p>The Team shall not be liable for any damages resulting from unauthorized access    to or use of our servers and/or any personal information stored therein, including    but not limited to damages resulting from hacking, data breaches, or other    security incidents.</p> </li> </ol>"},{"location":"legal/tos/#9-indemnification","title":"9. Indemnification","text":"<ol> <li> <p>You agree to indemnify, defend, and hold harmless the Team, its affiliates, and    their respective officers, directors, employees, agents, and representatives from    and against any and all claims, liabilities, damages, losses, costs, or expenses    (including reasonable attorneys' fees) arising out of or related to: your use of    the Service, your violation of these Terms, or your violation of any rights of    another party.</p> </li> <li> <p>This indemnification obligation includes but is not limited to any claims    arising from your content, your interactions with other users, or your violation    of any applicable laws or regulations.</p> </li> </ol>"},{"location":"legal/tos/#10-governing-law-and-dispute-resolution","title":"10. Governing law and dispute resolution","text":"<ol> <li> <p>These Terms shall be governed by and construed in accordance with the laws of the    jurisdiction in which the Team is located, without regard to its conflict of law    principles.</p> </li> <li> <p>Any disputes arising out of or related to these Terms or your use of the Service    shall be resolved through binding arbitration in accordance with the rules of the    jurisdiction in which the Team is located. The arbitration shall take place in the    jurisdiction where the Team is located, and you agree to submit to the personal    jurisdiction of that jurisdiction to resolve any disputes.</p> </li> <li> <p>You agree that any claim or cause of action arising out of or related to these    Terms or your use of the Service; must be filed within one (1) year after such    claim or cause of action arose, or it will be forever barred.</p> </li> </ol>"},{"location":"legal/tos/#11-severability","title":"11. Severability","text":"<ol> <li> <p>If any provision of these Terms is found to be invalid, illegal, or unenforceable    by a court of competent jurisdiction, such provision shall be limited or eliminated;    to the minimum extent necessary so that the remaining provisions of these Terms    remain in full force and effect.</p> </li> <li> <p>The failure of the Team to enforce any right or provision of these Terms shall not    be deemed a waiver of such right or provision. Any waiver of any provision    contained in these Terms will be effective only if in writing and signed by the    Team.</p> </li> </ol>"},{"location":"legal/tos/#12-fees","title":"12. Fees","text":"<ol> <li> <p>The Service is provided free of charge. However, the Team reserves the right to    introduce fees for certain features or services in the future. If such fees are    introduced, the Team will provide prior notice and get your consent before    charging any fees.</p> </li> <li> <p>The Team waives its right to introduce fees for features or services that have    been made freely accessible in the past or present, therefore maintaining the    free availability of the services and features already provided at some previous    point.</p> </li> <li> <p>If you choose to use any paid features or services, you agree to pay all applicable    fees, in accordance with the payment terms provided at the time of purchase. The    Team reserves the right to change its fees at any time, but any changes will not    affect fees already paid for services that have been provided.</p> </li> </ol>"},{"location":"legal/tos/#13contact-information","title":"13.Contact information","text":"<ol> <li> <p>If you have any questions, concerns, or feedback regarding these Terms or the    Service, you have the right to contact the Team through any of the    official channels.</p> </li> <li> <p>The Team has a right to refuse to answer to questions or concerns about the    Service; unless they are related to these Terms or the associated Privacy Policy,    in which case, the right of the User to be informed outrules the right outlined    here.</p> </li> </ol>"},{"location":"legal/tos/#14-entire-agreement","title":"14. Entire agreement","text":"<ol> <li> <p>These Terms constitute the entire agreement between you and the Team regarding    your use of the Service and supersede any prior agreements or understandings,    whether written or oral, relating to the subject of these Terms.</p> </li> <li> <p>If any provision of these Terms is found to be invalid, illegal, or unenforceable,    the remaining provisions shall remain in full force and effect. The Team's failure    to enforce any right or provision of these Terms shall not be deemed a waiver of    such right or provision.</p> </li> </ol>"},{"location":"legal/tos/#15-acknowledgment","title":"15. Acknowledgment","text":"<ol> <li>By using the Service, you acknowledge that you have read, understood, and agree    to be bound by these Terms, and the associated Privacy Policy.    If you do not agree with any part of these Terms or the Privacy Policy, you must    not use the Service.</li> </ol>"},{"location":"tutorials/basic/","title":"Basic TransforMate Tutorial","text":"<p>In this tutorial, you will learn how to operate the basics of TransforMate, plus a few handy tricks to help you transform yourself and others in an approachable and fun manner!</p> <p>Before starting, go to a Discord server where you can test the bot's functionalities without disturbing other users. If you need to find such a place, you can always use the <code>public-bot-tests</code> channel in the awesome Official TransforMate Discord Server, where you can also freely ask for help to our great team if you get stuck at any point of this guide.</p> <p>Note</p> <p>Remember that Discord provides an autocomplete feature, and that, when inputting the command, you can select the field you want to fill out through this very autocomplete feature. When you're still learning, autocomplete will be your very best friend.</p>"},{"location":"tutorials/basic/#learning-to-use-the-transform-command","title":"Learning to use the <code>/transform</code> command","text":"<p>This command will be your most versatile tool, since you will constantly be using it, alongside its partner, the <code>/goback</code> command. In this section, you'll learn to transform yourself, but remember you can always change other users by using the <code>user</code> parameter.</p> <p>Go to your testing channel, and type the <code>/transform</code> command. You will see a lot of options, but the one that interests us at this moment is the <code>into</code> parameter. For this test, set it to whatever you like, for example, \"Test1\"; and send the command.</p> <p>And that's it! You have transformed yourself! Try typing in the chat, and see how you're now transformed!</p> <p>Note</p> <p>You will easily be able to tell that your avatar when transformed is your normal user avatar. That's because we haven't provided an <code>image_url</code> field, so the bot has defaulted to your profile picture for your avatar.</p> <p>Now that you're transformed, you have to know how to go back, don't you? Try executing the <code>/goback</code> command, without filling out any of the arguments. Ta-dah! Now you're back to normal! Wasn't that easy?</p> <p>Once you're back to normal, if you want to return to your previous form, you just need to send the <code>/goback</code> command once more, and the bot will turn you into whatever you were last time you went back to normal!</p> Exercise 1 <p>You have now transformed yourself for the first time. But, as we've seen, if we don't provide an <code>image_url</code> parameter, we default to just having our profile picture as our avatar. How can we change this by using the <code>\u00ecmage_url</code> parameter?</p> Answer 1 <p>The <code>image_url</code> parameter takes as input any URL that serves an image. This means we could use any image, in theory. To do so, paste it into a Discord channel, right-click on it, and select \"Copy Image URL\". This URL can then be given as the <code>image_url</code> parameter for your transformation. Voil\u00e0! We have an avatar image that isn't your profile picture!</p> <p>But, is there an easier method, that doesn't require us to fool around and paste images into Discord...?</p>"},{"location":"tutorials/basic/#the-simplified-command","title":"The \"simplified\" command","text":"<p>The full <code>/transform</code> command is designed to be very versatile and compact, but it can sometimes be very bothersome having to copy image URLs, or to remember what each option does.</p> <p>This is why the \"simplified\" mode exists! Simply execute <code>/transform</code>, without any parameters (unless you want to transform another user, in which case you should populate the <code>user</code> parameter), and wait for the bot to respond.</p> <p>The bot will ask you what you want to transform into. Now, you can simply reply with the name of what you want to transform into, BUT, and this is where the magic happens; if you attach an image to the message, the bot will automatically set it as your avatar! No need for pesky URLs!</p>"},{"location":"tutorials/basic/#playing-with-settings","title":"Playing with settings","text":"<p>There are a lot of settings you can configure for a transformation with TransforMate. If you want to know all of the settings you can configure, check out the set and clear commands index.</p> <p>For the examples given here, we've decided to use the censor, muffle, hush, and stutter settings, which describe the types of settings the bot has available in a pretty good manner, without exceeding what's realistically possible to easily learn in this tutorial.</p> <p>Let's start by the easiest kind of setting: On-off settings. Currently, these are the big, small, hush, and backwards settings. Try and hush your messages by using <code>/set hush</code>. When you type next time, it will be a spoiler, \"hushing\" you. Try it!</p> Exercise 2 <p>Can you make your text small, and disable hushing now?</p> Answer 2 <p>To make your text small, you just need to use the <code>/set small</code> command, and, to stop being hushed, just use <code>/clear hush</code>!</p> <p>That is the most basic type of setting you can modify, but we still have a long way to go! Let's try with numeric settings now! At the moment, the only setting of this kind that's available in TransforMate is he stutter setting. Let's try and make you stutter with a 20% chance. For this, you'll need to use the <code>/set stutter &lt;chance&gt;</code> command. Can you manage to do it?</p> <p>Once you've figured it out, try typing a bit of text and see if you stutter a bit!</p> <p>Note</p> <p>Remember, any time you want to check your current settings you can use <code>/get settings</code>, and the other <code>/get</code> commands to see your settings in detail!</p> <p>You're doing great! We're halfway there to learn all the kinds of modifiers you can use with TransforMate, and being able to transform yourself and others with ease!</p> <p>Now, it's time to introduce chance-based modifiers. These can have a lot of different values for the same user. Let's say, for example, that we have a user, lets call him John. John has been muffled by his friends, with three different words. This means those three words will be substituting some of his words with a random chance.</p> <p>For this example, let's say the words are \"cheese\", \"squeak\", and \"great beyond\", and that their chances to occur are, in order, 20%, 50%, and 3%. How would you se this up?</p> <p>Well, to do so, we would need three commands:</p> <pre><code>/set muffle chese 20\n/set muffle *squeak* 50\n/set muffle \"great beyond\" 3\n</code></pre> <p>Warning</p> <p>You should be aware that a multi-word parameter like \"great beyond\" works because Discord treats everything you write inside a parameter like a single thing, so, in practice, you don't need the surrounding quotes, used here to tell you that it goes al together in the same parameter. If you keep the quotes, they will become part of the final substitution!</p> <p>Now, you might have noticed that we have messed up the word \"cheese\" and written \"chese\" instead! We could always do <code>/clear muffle</code>, to clear all of the muffle settings we have just set up, but, specially for more complex transformations, that is a chore we shouldn't really have to go through!</p> <p>Instead, try using <code>/clear muffle chese</code>! This will only delete the erroneous muffle, and you'll write half as much! Try it!</p> <p>Now, you have learnt the three \"basic\" types of modifiers, and you can use what is basically the entire set of modifiers the bot has to offer. The only two you have left to learn are the biography, and the censor modifiers!</p> Exercise 3 <p>Can you set a biography for your current transformation? Try to be creative!</p> Answer 3 <p>Using the <code>/set bio</code> command you can see a biography as long as you want (Discord's message length restrictions apply).</p> <p>And an exra trick: You can use the <code>\\n</code> escape character to make a line jump!</p> <p>Now, the censor command isn't all that different from the chance-based modifiers like muffle, but it differs in a very important aspect. Censors differ from these in that they don't trigger based on a random chance, but based on a keyword.</p> <p>For example, let's say we censor the word \"four\" to say \"five\". This means that EVERY TIME the transformed user says the word \"four\", they will say \"five\" instead, for example, \"two plus two is four\" will become \"two plus two is five\".</p> <p>To set a censor, we use a similar syntax as for chance-based modifiers. For the above example, for example, we'd use <code>/set censor four five</code>. See? Easy right? Try it out!</p> <p>Now what?</p> <p>You have learnt how to use the basics of modifiers! Now you should try other modifiers around, like the sprinkle or suffix. Try the alternative muffle, that muffles entire messages instead of words, if you want! You're free to experiment with the bot and learn from that! Have fun!</p>"},{"location":"tutorials/basic/#exporting-and-importing-transformations","title":"Exporting and importing transformations","text":"<p>Sometimes, you make a really great transformation, and you'd like to either share it with your friends; or just to save it for later whilst you experiment with some new transformation ideas.</p> <p>To do this, you can export and import transformations to either text files; or easy to share (and edit) strings. This not only allows you to save and share transformation, but also to edit transformation data without needing to use a single command for every single thing you want to change about a transformation. To know more about how to edit these files, check out the full documentation for the transformation data string commands, where you'll find a full explanation oh how these strings (and the files) work, so you can edit them to your liking.</p> <p>For now, in this tutorial, we will learn the basics on how to import and export your transformation data. For this, you'll need to be transformed. Choose a form that has a few modifiers applied, so that you can see how they're kept completely through exporting and re-importing it.</p> <p>Now, execute he <code>/export_tf</code> command. You will get a file, with the same name as your transformation. This file contains all the information about your current transformation, that can be used to transform yourself once again, or to transform others.</p> <p>Note</p> <p>Transformation files do not store any information about the user that created them, the time they were created at, where they were created at, or how they were created. If no external information is given, transformation files are effectively untraceable, so you don't have to worry about people doxxing you from a transformation file, don't worry!</p> <p>Now, why don't you try transforming into something else? Make sure it's different from what you just transformed out of, but don't worry about making a complex transformation, just enough to see the difference.</p> <p>Now, use the <code>/import_tf</code> command. The bot will ask you for a transformation to use to transform you. You can use a file or a string here. Since we got a file, just send a message with the file attached. And... That's it! Now, if you check your settings, you'll see that you're on the form you were before, all the same! Pretty awesome, right?</p> <p>You can store these files in Discord itself, or on any other storage platform, including your own computer! But not everyone has access to a computer, much less at all times, so, to make storing transformation easier, you can always get a string by setting the <code>file</code> parameter of <code>/export_tf</code> to false! This will give you an easy-to-copy string that you can save in your notes app or in a Discord channel, so it's easier to copy and use!</p>"},{"location":"tutorials/basic/#claiming-and-eternally-transforming-other-users","title":"Claiming and eternally transforming other users","text":"<p>For this part of the tutorial, you will need a good friend to be your test subject. Be sure they're fine with being claimed and eternally transformed for a few minutes so you can learn the basics of these features.</p> <p>Warning</p> <p>Remember, kids: Consent is important</p> <p>Now, transform your friend into something they enjoy being. Once you're done, use the <code>/claim</code> command to claim them. If you do so successfully, the bot will let you know. Now, you're the \"owner\" of your friend. This means you're the only one allowed to transform them and modify their settings. They themselves can still go back to their normal form, though.</p> <p>Danger</p> <p>If at any point you feel uncomfortable as the claimed user, there's a command to free yourself: <code>/safeword</code>. If you feel like your partner has abused you or didn't consent, try to resolve the issue with the server's moderation team. If this doesn't work, use the <code>/report</code> command, or send the word \"report\" to the bot's DMs.</p> <p>To avoid them escaping their transformative cage, you'll have to close the door with the <code>/set eternal</code> command. Now, they'll be eternally transformed into whatever form you have chosen for them, until you decide to free them.</p> <p>Note</p> <p>Remember to use <code>/clear eternal</code> and/or <code>/unclaim</code> when you are done with your partner, so they can be free once again.</p>"},{"location":"tutorials/basic/#conclusion","title":"Conclusion","text":"<p>Well, you have done great! Now you know how to use all the basic features of the bot! We've only really skipped two features in all of this tutorial. The first of these is the per-channel transformations, but you should be able to figure those out with the information in this tutorial.</p> <p>Hint</p> <p>Check out the <code>channel</code> parameter in the <code>/transform</code> command.</p> <p>There's only really one thing you've missed, and that's the twinning and merging capabilities of the bot. These are very specific and kinda fiddly. Check out the Basic Twinning Tutorial to learn more about this feature!</p> <p>We'd recommend you experiment a bit with the bot, to get your bearings, and, always remember to have fun and let others have their own fun!</p>"},{"location":"tutorials/summary/","title":"Summary","text":"<p>In this page,you have a collection of various tutorials, that try to explain how to properly use the TransforMate bot in an easy-to-comprehend and interactive manner, so that it is accessible to everyone.</p> <p>These tutorials contain small exercises for you to do as you go, if you'd like to figure stuff out slowly and by yourself. The solution is included so that you can get the information outright if you so desire, but we recommend \"fooling around\" with the bot. You will learn more, faster, and better that way. Give it a try!</p>"},{"location":"tutorials/summary/#beginner-tutorials","title":"Beginner tutorials","text":"<p>These tutorials are designed for people that are just now starting to use the bot, and that want a quick and interactive manner to get accustomed to the bot's usage.</p> <ul> <li> <p>Basic TransforMate Tutorial</p> <p>Learn how to use the most basic features of the bot, like basic transformation and setting manipulation. You will also learn to export and import settings, and to claim and eternally transform other users.</p> </li> <li> <p>Basic Twinning Tutorial</p> <p>Learn how to copy other transformations, merge with other users, and create an army of users with the same transformation.</p> </li> </ul>"},{"location":"tutorials/twinning/","title":"Basic Twinning Tutorial","text":"<p>Twinning, at least here, refers to when you copy a user's transformation and apply it to yourself, effectively becoming a copy of them. Merging is the same concept, but you'll become literally the same; that includes your messages merging, so you cannot even be differentiated from one another!</p> <p>We recommend starting by checking out the Basic TransforMate Tutorial. If you already come from there, you'll probably be thinking \"can't I just do this by exporting my transformation and importing it onto another user, or viceversa?\", and, yeah, you'd be right, you could do that... Why would you, though? Unless you want to edit the file or string, that limits you to only merging, and, besides, you can do all that with just the <code>/transform</code> command.</p> <p>You might have noticed this command has a <code>copy</code> and a <code>merge</code> parameter, right? The <code>copy</code> parameter takes a user as an input, and it will copy the data from that user into whatever user you choose to transform, including yourself. If you set the <code>merge</code> value to be true, you'll merge with them. Easy, isn't it?</p> <p>Warning</p> <p>When you don't merge two users, the way the bot actually handles this is by adding an invisible character to the end of the name on the newly transformed user.</p> <p>This means that, if you want to transform, let's say, three users, you would need to first do the original transformation, then twin that one onto another, and then, twin the one you just twinned into the other user. Otherwise, the second and third users will effectively be merged!</p> <p>But wait! There's an extra feature awaiting you in this command! You can still provide all the other parameters the <code>/transform</code> command takes, like <code>into</code> and <code>image_url</code>, and the bot will automatically change the copied values to reflect your changed data. This allows you to do some cool stuff, like twinning with very slight changes to he newly transformed user. Try it out!</p>"}]}